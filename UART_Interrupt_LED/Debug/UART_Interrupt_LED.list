
UART_Interrupt_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004230  08004230  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004230  08004230  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004230  08004230  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000074  080042ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080042ac  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a186  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb8  00000000  00000000  0002a22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0002bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002c570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fbb0  00000000  00000000  0002cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b75  00000000  00000000  0004c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfb2d  00000000  00000000  00056375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115ea2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002120  00000000  00000000  00115ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004104 	.word	0x08004104

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004104 	.word	0x08004104

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b598      	push	{r3, r4, r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b4:	f000 fb8a 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f978 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 fa04 	bl	80006c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002c0:	f000 f9d2 	bl	8000668 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //uint16_t len_of_data = strlen(user_data);
  HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data),HAL_MAX_DELAY);
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <main+0x4c>)
 80002c6:	681c      	ldr	r4, [r3, #0]
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <main+0x4c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff91 	bl	80001f4 <strlen>
 80002d2:	4603      	mov	r3, r0
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	f04f 33ff 	mov.w	r3, #4294967295
 80002da:	4621      	mov	r1, r4
 80002dc:	4808      	ldr	r0, [pc, #32]	; (8000300 <main+0x50>)
 80002de:	f002 fabd 	bl	800285c <HAL_UART_Transmit>

  while(reception_complete != TRUE)
 80002e2:	e004      	b.n	80002ee <main+0x3e>
        	 	          	        {


	                                    	HAL_UART_Receive_IT(&huart2,&recvd_data,1);
 80002e4:	2201      	movs	r2, #1
 80002e6:	4907      	ldr	r1, [pc, #28]	; (8000304 <main+0x54>)
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <main+0x50>)
 80002ea:	f002 fb4b 	bl	8002984 <HAL_UART_Receive_IT>
  while(reception_complete != TRUE)
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <main+0x58>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d1f5      	bne.n	80002e4 <main+0x34>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
        while (1)
 80002f8:	e7fe      	b.n	80002f8 <main+0x48>
 80002fa:	bf00      	nop
 80002fc:	20000000 	.word	0x20000000
 8000300:	200000b0 	.word	0x200000b0
 8000304:	200000ac 	.word	0x200000ac
 8000308:	2000009c 	.word	0x2000009c

0800030c <HAL_UART_RxCpltCallback>:

  /* USER CODE END 3 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b096      	sub	sp, #88	; 0x58
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2,&recvd_data,1);
 8000314:	2201      	movs	r2, #1
 8000316:	4995      	ldr	r1, [pc, #596]	; (800056c <HAL_UART_RxCpltCallback+0x260>)
 8000318:	4895      	ldr	r0, [pc, #596]	; (8000570 <HAL_UART_RxCpltCallback+0x264>)
 800031a:	f002 fb33 	bl	8002984 <HAL_UART_Receive_IT>
	if(recvd_data == '\r')
 800031e:	4b93      	ldr	r3, [pc, #588]	; (800056c <HAL_UART_RxCpltCallback+0x260>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b0d      	cmp	r3, #13
 8000324:	f040 8114 	bne.w	8000550 <HAL_UART_RxCpltCallback+0x244>
		 {
			 reception_complete = TRUE;
 8000328:	4b92      	ldr	r3, [pc, #584]	; (8000574 <HAL_UART_RxCpltCallback+0x268>)
 800032a:	2201      	movs	r2, #1
 800032c:	701a      	strb	r2, [r3, #0]
			 char *overload_buffer = "Buffer is full!\r\n";
 800032e:	4b92      	ldr	r3, [pc, #584]	; (8000578 <HAL_UART_RxCpltCallback+0x26c>)
 8000330:	657b      	str	r3, [r7, #84]	; 0x54

			 //int result1,result2;
			 if(count>=10)
 8000332:	4b92      	ldr	r3, [pc, #584]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b09      	cmp	r3, #9
 8000338:	d91a      	bls.n	8000370 <HAL_UART_RxCpltCallback+0x64>
					 {
						 HAL_UART_Transmit(huart,(uint8_t*)overload_buffer,strlen(overload_buffer),HAL_MAX_DELAY); // "Buffer is full"
 800033a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800033c:	f7ff ff5a 	bl	80001f4 <strlen>
 8000340:	4603      	mov	r3, r0
 8000342:	b29a      	uxth	r2, r3
 8000344:	f04f 33ff 	mov.w	r3, #4294967295
 8000348:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f002 fa86 	bl	800285c <HAL_UART_Transmit>

						 while (count>0)
 8000350:	e009      	b.n	8000366 <HAL_UART_RxCpltCallback+0x5a>
						 {                                       //buffer wieder leer machen
							 data_buffer[count]=0;
 8000352:	4b8a      	ldr	r3, [pc, #552]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a8a      	ldr	r2, [pc, #552]	; (8000580 <HAL_UART_RxCpltCallback+0x274>)
 8000358:	2100      	movs	r1, #0
 800035a:	54d1      	strb	r1, [r2, r3]
							 count--;
 800035c:	4b87      	ldr	r3, [pc, #540]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3b01      	subs	r3, #1
 8000362:	4a86      	ldr	r2, [pc, #536]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 8000364:	6013      	str	r3, [r2, #0]
						 while (count>0)
 8000366:	4b85      	ldr	r3, [pc, #532]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f1      	bne.n	8000352 <HAL_UART_RxCpltCallback+0x46>
 800036e:	e0d4      	b.n	800051a <HAL_UART_RxCpltCallback+0x20e>
						   }
					 }
					 else
					 {
						                     char str1[]="LED ON";  //Befehl für LED an
 8000370:	4a84      	ldr	r2, [pc, #528]	; (8000584 <HAL_UART_RxCpltCallback+0x278>)
 8000372:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800037a:	6018      	str	r0, [r3, #0]
 800037c:	3304      	adds	r3, #4
 800037e:	8019      	strh	r1, [r3, #0]
 8000380:	3302      	adds	r3, #2
 8000382:	0c0a      	lsrs	r2, r1, #16
 8000384:	701a      	strb	r2, [r3, #0]
						 					 char str2[]="LED OFF";  //Befehl für LED aus
 8000386:	4a80      	ldr	r2, [pc, #512]	; (8000588 <HAL_UART_RxCpltCallback+0x27c>)
 8000388:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800038c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000390:	e883 0003 	stmia.w	r3, {r0, r1}
						 					 char str3[]="COUNTER ON"; //Befehl für Zaeler an
 8000394:	4a7d      	ldr	r2, [pc, #500]	; (800058c <HAL_UART_RxCpltCallback+0x280>)
 8000396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800039a:	ca07      	ldmia	r2, {r0, r1, r2}
 800039c:	c303      	stmia	r3!, {r0, r1}
 800039e:	801a      	strh	r2, [r3, #0]
 80003a0:	3302      	adds	r3, #2
 80003a2:	0c12      	lsrs	r2, r2, #16
 80003a4:	701a      	strb	r2, [r3, #0]
						 					 char str4[]="COUNTER OFF";// Befehl für Zaeler aus
 80003a6:	4a7a      	ldr	r2, [pc, #488]	; (8000590 <HAL_UART_RxCpltCallback+0x284>)
 80003a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80003ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						 					 char str5[]="COUNTER"; //Befehl für Zaeler
 80003b2:	4a78      	ldr	r2, [pc, #480]	; (8000594 <HAL_UART_RxCpltCallback+0x288>)
 80003b4:	f107 0320 	add.w	r3, r7, #32
 80003b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003bc:	e883 0003 	stmia.w	r3, {r0, r1}
						 					 char *error_buffer = "Command is Invalid\r\n"; // ungültig Befehl
 80003c0:	4b75      	ldr	r3, [pc, #468]	; (8000598 <HAL_UART_RxCpltCallback+0x28c>)
 80003c2:	653b      	str	r3, [r7, #80]	; 0x50

						 					 char LED_OFF_buffer[10];
						 					 char LED_ON_buffer[10];


						 					 if(strcmp(str1,(char*)data_buffer)==0)               //Befehl vergleichen
 80003c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003c8:	496d      	ldr	r1, [pc, #436]	; (8000580 <HAL_UART_RxCpltCallback+0x274>)
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff08 	bl	80001e0 <strcmp>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d10b      	bne.n	80003ee <HAL_UART_RxCpltCallback+0xe2>
						 					 	{
						 					 		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_SET); // LED an
 80003d6:	2201      	movs	r2, #1
 80003d8:	2120      	movs	r1, #32
 80003da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003de:	f000 fe6d 	bl	80010bc <HAL_GPIO_WritePin>
						 					 		ON_Counter++;
 80003e2:	4b6e      	ldr	r3, [pc, #440]	; (800059c <HAL_UART_RxCpltCallback+0x290>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3301      	adds	r3, #1
 80003e8:	4a6c      	ldr	r2, [pc, #432]	; (800059c <HAL_UART_RxCpltCallback+0x290>)
 80003ea:	6013      	str	r3, [r2, #0]
 80003ec:	e095      	b.n	800051a <HAL_UART_RxCpltCallback+0x20e>
						 					 	}
						 					 else if(strcmp(str2,(char*)data_buffer)==0)   //Befehl vergleichen
 80003ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003f2:	4963      	ldr	r1, [pc, #396]	; (8000580 <HAL_UART_RxCpltCallback+0x274>)
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff fef3 	bl	80001e0 <strcmp>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d10b      	bne.n	8000418 <HAL_UART_RxCpltCallback+0x10c>
						 					 	{
						 					 		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);  //LED aus
 8000400:	2200      	movs	r2, #0
 8000402:	2120      	movs	r1, #32
 8000404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000408:	f000 fe58 	bl	80010bc <HAL_GPIO_WritePin>
						 					 		OFF_Counter++;
 800040c:	4b64      	ldr	r3, [pc, #400]	; (80005a0 <HAL_UART_RxCpltCallback+0x294>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	4a63      	ldr	r2, [pc, #396]	; (80005a0 <HAL_UART_RxCpltCallback+0x294>)
 8000414:	6013      	str	r3, [r2, #0]
 8000416:	e080      	b.n	800051a <HAL_UART_RxCpltCallback+0x20e>

						 					 	}
						 					 else if(strcmp(str3,(char*)data_buffer)==0)   //Befehl vergleichen
 8000418:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800041c:	4958      	ldr	r1, [pc, #352]	; (8000580 <HAL_UART_RxCpltCallback+0x274>)
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff fede 	bl	80001e0 <strcmp>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d116      	bne.n	8000458 <HAL_UART_RxCpltCallback+0x14c>
						 						 //HAL_UART_Transmit(huart,(uint8_t*)ON_buffer,strlen(error_buffer),HAL_MAX_DELAY);
						 						// HAL_UART_Transmit(huart,(uint8_t*) ON_Counter,strlen(error_buffer),HAL_MAX_DELAY);
						 						 //HAL_UART_Transmit(huart,(uint8_t*)OFF_buffer,strlen(error_buffer),HAL_MAX_DELAY);
						 						 //HAL_UART_Transmit(huart, (uint8_t*)OFF_Counter,strlen(error_buffer),HAL_MAX_DELAY);

						 						 sprintf(LED_ON_buffer,"LED is ON %d times\r\n",ON_Counter);
 800042a:	4b5c      	ldr	r3, [pc, #368]	; (800059c <HAL_UART_RxCpltCallback+0x290>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	f107 0308 	add.w	r3, r7, #8
 8000432:	495c      	ldr	r1, [pc, #368]	; (80005a4 <HAL_UART_RxCpltCallback+0x298>)
 8000434:	4618      	mov	r0, r3
 8000436:	f003 fa37 	bl	80038a8 <siprintf>
						 						 HAL_UART_Transmit(huart, (uint8_t*)LED_ON_buffer,strlen(LED_ON_buffer) ,HAL_MAX_DELAY);
 800043a:	f107 0308 	add.w	r3, r7, #8
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff fed8 	bl	80001f4 <strlen>
 8000444:	4603      	mov	r3, r0
 8000446:	b29a      	uxth	r2, r3
 8000448:	f107 0108 	add.w	r1, r7, #8
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f002 fa03 	bl	800285c <HAL_UART_Transmit>
 8000456:	e060      	b.n	800051a <HAL_UART_RxCpltCallback+0x20e>


						 					 }
						 					 else if(strcmp(str4,(char*)data_buffer)==0)   //Befehl vergleichen
 8000458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800045c:	4948      	ldr	r1, [pc, #288]	; (8000580 <HAL_UART_RxCpltCallback+0x274>)
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff febe 	bl	80001e0 <strcmp>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d116      	bne.n	8000498 <HAL_UART_RxCpltCallback+0x18c>
						 					 {
						 						sprintf(LED_OFF_buffer,"LED is OFF %d times\r\n",OFF_Counter);
 800046a:	4b4d      	ldr	r3, [pc, #308]	; (80005a0 <HAL_UART_RxCpltCallback+0x294>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	494d      	ldr	r1, [pc, #308]	; (80005a8 <HAL_UART_RxCpltCallback+0x29c>)
 8000474:	4618      	mov	r0, r3
 8000476:	f003 fa17 	bl	80038a8 <siprintf>
						 						HAL_UART_Transmit(huart, (uint8_t*)LED_OFF_buffer,strlen(LED_OFF_buffer),HAL_MAX_DELAY);
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff feb8 	bl	80001f4 <strlen>
 8000484:	4603      	mov	r3, r0
 8000486:	b29a      	uxth	r2, r3
 8000488:	f107 0114 	add.w	r1, r7, #20
 800048c:	f04f 33ff 	mov.w	r3, #4294967295
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f002 f9e3 	bl	800285c <HAL_UART_Transmit>
 8000496:	e040      	b.n	800051a <HAL_UART_RxCpltCallback+0x20e>
						 					 }

						 					 else if(strcmp(str5,(char*)data_buffer)==0)  //Befehl vergleichen
 8000498:	f107 0320 	add.w	r3, r7, #32
 800049c:	4938      	ldr	r1, [pc, #224]	; (8000580 <HAL_UART_RxCpltCallback+0x274>)
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe9e 	bl	80001e0 <strcmp>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d12c      	bne.n	8000504 <HAL_UART_RxCpltCallback+0x1f8>
						 					 {
						 						 sprintf(LED_ON_buffer,"LED is ON %d times\r\n",ON_Counter);
 80004aa:	4b3c      	ldr	r3, [pc, #240]	; (800059c <HAL_UART_RxCpltCallback+0x290>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	f107 0308 	add.w	r3, r7, #8
 80004b2:	493c      	ldr	r1, [pc, #240]	; (80005a4 <HAL_UART_RxCpltCallback+0x298>)
 80004b4:	4618      	mov	r0, r3
 80004b6:	f003 f9f7 	bl	80038a8 <siprintf>
						 						 HAL_UART_Transmit(huart, (uint8_t*)LED_ON_buffer,strlen(LED_ON_buffer) ,HAL_MAX_DELAY); // Zaeler daten senden
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff fe98 	bl	80001f4 <strlen>
 80004c4:	4603      	mov	r3, r0
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	f107 0108 	add.w	r1, r7, #8
 80004cc:	f04f 33ff 	mov.w	r3, #4294967295
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f002 f9c3 	bl	800285c <HAL_UART_Transmit>
						 						 sprintf(LED_OFF_buffer,"LED is OFF %d times\r\n",OFF_Counter);
 80004d6:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <HAL_UART_RxCpltCallback+0x294>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4932      	ldr	r1, [pc, #200]	; (80005a8 <HAL_UART_RxCpltCallback+0x29c>)
 80004e0:	4618      	mov	r0, r3
 80004e2:	f003 f9e1 	bl	80038a8 <siprintf>
						 						 HAL_UART_Transmit(huart, (uint8_t*)LED_OFF_buffer,strlen(LED_OFF_buffer),HAL_MAX_DELAY); // Zaeler daten senden
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe82 	bl	80001f4 <strlen>
 80004f0:	4603      	mov	r3, r0
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	f107 0114 	add.w	r1, r7, #20
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f002 f9ad 	bl	800285c <HAL_UART_Transmit>
 8000502:	e00a      	b.n	800051a <HAL_UART_RxCpltCallback+0x20e>
						 					 }
						 					 else
						 					 	{
						 					 		 HAL_UART_Transmit(huart,(uint8_t*)error_buffer,strlen(error_buffer),HAL_MAX_DELAY);  //"ungültig Befehl" übertragen
 8000504:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000506:	f7ff fe75 	bl	80001f4 <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	b29a      	uxth	r2, r3
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f002 f9a1 	bl	800285c <HAL_UART_Transmit>
						 					 	}

					 }


					 data_buffer[count++]='\r';
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	4916      	ldr	r1, [pc, #88]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 8000522:	600a      	str	r2, [r1, #0]
 8000524:	4a16      	ldr	r2, [pc, #88]	; (8000580 <HAL_UART_RxCpltCallback+0x274>)
 8000526:	210d      	movs	r1, #13
 8000528:	54d1      	strb	r1, [r2, r3]

			 for(count=10; count>0; count--)                        //buffer leer machen
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 800052c:	220a      	movs	r2, #10
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	e009      	b.n	8000546 <HAL_UART_RxCpltCallback+0x23a>


			       {

				 data_buffer[count]=0;
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <HAL_UART_RxCpltCallback+0x274>)
 8000538:	2100      	movs	r1, #0
 800053a:	54d1      	strb	r1, [r2, r3]
			 for(count=10; count>0; count--)                        //buffer leer machen
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	3b01      	subs	r3, #1
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f1      	bne.n	8000532 <HAL_UART_RxCpltCallback+0x226>
		 {
			 data_buffer[count++] = recvd_data;
		 }


}
 800054e:	e008      	b.n	8000562 <HAL_UART_RxCpltCallback+0x256>
			 data_buffer[count++] = recvd_data;
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	1c5a      	adds	r2, r3, #1
 8000556:	4909      	ldr	r1, [pc, #36]	; (800057c <HAL_UART_RxCpltCallback+0x270>)
 8000558:	600a      	str	r2, [r1, #0]
 800055a:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_UART_RxCpltCallback+0x260>)
 800055c:	7811      	ldrb	r1, [r2, #0]
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <HAL_UART_RxCpltCallback+0x274>)
 8000560:	54d1      	strb	r1, [r2, r3]
}
 8000562:	bf00      	nop
 8000564:	3758      	adds	r7, #88	; 0x58
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000ac 	.word	0x200000ac
 8000570:	200000b0 	.word	0x200000b0
 8000574:	2000009c 	.word	0x2000009c
 8000578:	08004138 	.word	0x08004138
 800057c:	20000090 	.word	0x20000090
 8000580:	20000134 	.word	0x20000134
 8000584:	08004194 	.word	0x08004194
 8000588:	0800419c 	.word	0x0800419c
 800058c:	080041a4 	.word	0x080041a4
 8000590:	080041b0 	.word	0x080041b0
 8000594:	080041bc 	.word	0x080041bc
 8000598:	0800414c 	.word	0x0800414c
 800059c:	20000094 	.word	0x20000094
 80005a0:	20000098 	.word	0x20000098
 80005a4:	08004164 	.word	0x08004164
 80005a8:	0800417c 	.word	0x0800417c

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b0a6      	sub	sp, #152	; 0x98
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005b6:	2228      	movs	r2, #40	; 0x28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f96c 	bl	8003898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2258      	movs	r2, #88	; 0x58
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 f95e 	bl	8003898 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fd6e 	bl	80010ec <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000616:	f000 f8bf 	bl	8000798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000630:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fc6e 	bl	8001f18 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000642:	f000 f8a9 	bl	8000798 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000646:	2302      	movs	r3, #2
 8000648:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fe97 	bl	8002384 <HAL_RCCEx_PeriphCLKConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800065c:	f000 f89c 	bl	8000798 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3798      	adds	r7, #152	; 0x98
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <MX_USART2_UART_Init+0x5c>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_USART2_UART_Init+0x58>)
 80006ac:	f002 f888 	bl	80027c0 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006b6:	f000 f86f 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000b0 	.word	0x200000b0
 80006c4:	40004400 	.word	0x40004400

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b2b      	ldr	r3, [pc, #172]	; (800078c <MX_GPIO_Init+0xc4>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a2a      	ldr	r2, [pc, #168]	; (800078c <MX_GPIO_Init+0xc4>)
 80006e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <MX_GPIO_Init+0xc4>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_GPIO_Init+0xc4>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <MX_GPIO_Init+0xc4>)
 80006fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_GPIO_Init+0xc4>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_GPIO_Init+0xc4>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a1e      	ldr	r2, [pc, #120]	; (800078c <MX_GPIO_Init+0xc4>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_GPIO_Init+0xc4>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_GPIO_Init+0xc4>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a18      	ldr	r2, [pc, #96]	; (800078c <MX_GPIO_Init+0xc4>)
 800072c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_GPIO_Init+0xc4>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000746:	f000 fcb9 	bl	80010bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_GPIO_Init+0xc8>)
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_GPIO_Init+0xcc>)
 8000760:	f000 fb22 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000764:	2320      	movs	r3, #32
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f000 fb13 	bl	8000da8 <HAL_GPIO_Init>

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	10210000 	.word	0x10210000
 8000794:	48000800 	.word	0x48000800

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007da:	2007      	movs	r0, #7
 80007dc:	f000 fa2c 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <HAL_UART_MspInit+0x8c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d130      	bne.n	8000870 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HAL_UART_MspInit+0x90>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a1a      	ldr	r2, [pc, #104]	; (800087c <HAL_UART_MspInit+0x90>)
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_UART_MspInit+0x90>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_UART_MspInit+0x90>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <HAL_UART_MspInit+0x90>)
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_UART_MspInit+0x90>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800083e:	230c      	movs	r3, #12
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084e:	2307      	movs	r3, #7
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f000 faa4 	bl	8000da8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2026      	movs	r0, #38	; 0x26
 8000866:	f000 f9f2 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800086a:	2026      	movs	r0, #38	; 0x26
 800086c:	f000 fa0b 	bl	8000c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40004400 	.word	0x40004400
 800087c:	40021000 	.word	0x40021000

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f8c4 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <USART2_IRQHandler+0x10>)
 80008da:	f002 f891 	bl	8002a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000b0 	.word	0x200000b0

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f002 ff94 	bl	8003844 <__errno>
 800091c:	4603      	mov	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <_sbrk+0x64>)
 8000938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20010000 	.word	0x20010000
 8000948:	00000400 	.word	0x00000400
 800094c:	200000a0 	.word	0x200000a0
 8000950:	20000158 	.word	0x20000158

08000954 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490e      	ldr	r1, [pc, #56]	; (80009b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0b      	ldr	r4, [pc, #44]	; (80009c4 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009a2:	f7ff ffd7 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f002 ff53 	bl	8003850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009aa:	f7ff fc81 	bl	80002b0 <main>

080009ae <LoopForever>:

LoopForever:
    b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009bc:	08004238 	.word	0x08004238
  ldr r2, =_sbss
 80009c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009c4:	20000154 	.word	0x20000154

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x28>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f92b 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fedc 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f943 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f90b 	bl	8000c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000004 	.word	0x20000004
 8000a50:	2000000c 	.word	0x2000000c
 8000a54:	20000008 	.word	0x20000008

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	2000000c 	.word	0x2000000c
 8000a7c:	20000140 	.word	0x20000140

08000a80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000140 	.word	0x20000140

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff29 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff3e 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff31 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffa2 	bl	8000bf4 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d008      	beq.n	8000cde <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2204      	movs	r2, #4
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e020      	b.n	8000d20 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 020e 	bic.w	r2, r2, #14
 8000cec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0201 	bic.w	r2, r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d06:	2101      	movs	r1, #1
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d005      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2204      	movs	r2, #4
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e027      	b.n	8000d9e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 020e 	bic.w	r2, r2, #14
 8000d5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0201 	bic.w	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	4798      	blx	r3
    } 
  }
  return status;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db6:	e160      	b.n	800107a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8152 	beq.w	8001074 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d00b      	beq.n	8000df0 <HAL_GPIO_Init+0x48>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d007      	beq.n	8000df0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de4:	2b11      	cmp	r3, #17
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b12      	cmp	r3, #18
 8000dee:	d130      	bne.n	8000e52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e26:	2201      	movs	r2, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	f003 0201 	and.w	r2, r3, #1
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0xea>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d123      	bne.n	8000eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	6939      	ldr	r1, [r7, #16]
 8000ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0203 	and.w	r2, r3, #3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 80ac 	beq.w	8001074 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1c:	4b5e      	ldr	r3, [pc, #376]	; (8001098 <HAL_GPIO_Init+0x2f0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a5d      	ldr	r2, [pc, #372]	; (8001098 <HAL_GPIO_Init+0x2f0>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b5b      	ldr	r3, [pc, #364]	; (8001098 <HAL_GPIO_Init+0x2f0>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f34:	4a59      	ldr	r2, [pc, #356]	; (800109c <HAL_GPIO_Init+0x2f4>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f5e:	d025      	beq.n	8000fac <HAL_GPIO_Init+0x204>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a4f      	ldr	r2, [pc, #316]	; (80010a0 <HAL_GPIO_Init+0x2f8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d01f      	beq.n	8000fa8 <HAL_GPIO_Init+0x200>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a4e      	ldr	r2, [pc, #312]	; (80010a4 <HAL_GPIO_Init+0x2fc>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d019      	beq.n	8000fa4 <HAL_GPIO_Init+0x1fc>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a4d      	ldr	r2, [pc, #308]	; (80010a8 <HAL_GPIO_Init+0x300>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d013      	beq.n	8000fa0 <HAL_GPIO_Init+0x1f8>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a4c      	ldr	r2, [pc, #304]	; (80010ac <HAL_GPIO_Init+0x304>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d00d      	beq.n	8000f9c <HAL_GPIO_Init+0x1f4>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a4b      	ldr	r2, [pc, #300]	; (80010b0 <HAL_GPIO_Init+0x308>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d007      	beq.n	8000f98 <HAL_GPIO_Init+0x1f0>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a4a      	ldr	r2, [pc, #296]	; (80010b4 <HAL_GPIO_Init+0x30c>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d101      	bne.n	8000f94 <HAL_GPIO_Init+0x1ec>
 8000f90:	2306      	movs	r3, #6
 8000f92:	e00c      	b.n	8000fae <HAL_GPIO_Init+0x206>
 8000f94:	2307      	movs	r3, #7
 8000f96:	e00a      	b.n	8000fae <HAL_GPIO_Init+0x206>
 8000f98:	2305      	movs	r3, #5
 8000f9a:	e008      	b.n	8000fae <HAL_GPIO_Init+0x206>
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	e006      	b.n	8000fae <HAL_GPIO_Init+0x206>
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e004      	b.n	8000fae <HAL_GPIO_Init+0x206>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e002      	b.n	8000fae <HAL_GPIO_Init+0x206>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <HAL_GPIO_Init+0x206>
 8000fac:	2300      	movs	r3, #0
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	f002 0203 	and.w	r2, r2, #3
 8000fb4:	0092      	lsls	r2, r2, #2
 8000fb6:	4093      	lsls	r3, r2
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fbe:	4937      	ldr	r1, [pc, #220]	; (800109c <HAL_GPIO_Init+0x2f4>)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <HAL_GPIO_Init+0x310>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ff0:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <HAL_GPIO_Init+0x310>)
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <HAL_GPIO_Init+0x310>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800101a:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <HAL_GPIO_Init+0x310>)
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <HAL_GPIO_Init+0x310>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001044:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_GPIO_Init+0x310>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_GPIO_Init+0x310>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <HAL_GPIO_Init+0x310>)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa22 f303 	lsr.w	r3, r2, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	f47f ae97 	bne.w	8000db8 <HAL_GPIO_Init+0x10>
  }
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000
 80010a0:	48000400 	.word	0x48000400
 80010a4:	48000800 	.word	0x48000800
 80010a8:	48000c00 	.word	0x48000c00
 80010ac:	48001000 	.word	0x48001000
 80010b0:	48001400 	.word	0x48001400
 80010b4:	48001800 	.word	0x48001800
 80010b8:	40010400 	.word	0x40010400

080010bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	f000 bf01 	b.w	8001f08 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 8160 	beq.w	80013d6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001116:	4bae      	ldr	r3, [pc, #696]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 030c 	and.w	r3, r3, #12
 800111e:	2b04      	cmp	r3, #4
 8001120:	d00c      	beq.n	800113c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001122:	4bab      	ldr	r3, [pc, #684]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b08      	cmp	r3, #8
 800112c:	d159      	bne.n	80011e2 <HAL_RCC_OscConfig+0xf6>
 800112e:	4ba8      	ldr	r3, [pc, #672]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113a:	d152      	bne.n	80011e2 <HAL_RCC_OscConfig+0xf6>
 800113c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001140:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001150:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b01      	cmp	r3, #1
 8001166:	d102      	bne.n	800116e <HAL_RCC_OscConfig+0x82>
 8001168:	4b99      	ldr	r3, [pc, #612]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	e015      	b.n	800119a <HAL_RCC_OscConfig+0xae>
 800116e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001172:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001182:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001186:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800118a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001196:	4b8e      	ldr	r3, [pc, #568]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800119e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80011a2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80011a6:	fa92 f2a2 	rbit	r2, r2
 80011aa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80011ae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80011b2:	fab2 f282 	clz	r2, r2
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	f042 0220 	orr.w	r2, r2, #32
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	f002 021f 	and.w	r2, r2, #31
 80011c2:	2101      	movs	r1, #1
 80011c4:	fa01 f202 	lsl.w	r2, r1, r2
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8102 	beq.w	80013d4 <HAL_RCC_OscConfig+0x2e8>
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 80fc 	bne.w	80013d4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	f000 be93 	b.w	8001f08 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d106      	bne.n	80011fc <HAL_RCC_OscConfig+0x110>
 80011ee:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a77      	ldr	r2, [pc, #476]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 80011f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e030      	b.n	800125e <HAL_RCC_OscConfig+0x172>
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x134>
 8001206:	4b72      	ldr	r3, [pc, #456]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a71      	ldr	r2, [pc, #452]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 800120c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6e      	ldr	r2, [pc, #440]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e01e      	b.n	800125e <HAL_RCC_OscConfig+0x172>
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122a:	d10c      	bne.n	8001246 <HAL_RCC_OscConfig+0x15a>
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a67      	ldr	r2, [pc, #412]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a64      	ldr	r2, [pc, #400]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 800123e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e00b      	b.n	800125e <HAL_RCC_OscConfig+0x172>
 8001246:	4b62      	ldr	r3, [pc, #392]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a61      	ldr	r2, [pc, #388]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 800124c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b5f      	ldr	r3, [pc, #380]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a5e      	ldr	r2, [pc, #376]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d059      	beq.n	800131c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fc0a 	bl	8000a80 <HAL_GetTick>
 800126c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001272:	f7ff fc05 	bl	8000a80 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d902      	bls.n	8001288 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	f000 be40 	b.w	8001f08 <HAL_RCC_OscConfig+0xe1c>
 8001288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800128c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001290:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800129c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d102      	bne.n	80012ba <HAL_RCC_OscConfig+0x1ce>
 80012b4:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	e015      	b.n	80012e6 <HAL_RCC_OscConfig+0x1fa>
 80012ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80012ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012e2:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80012ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80012f2:	fa92 f2a2 	rbit	r2, r2
 80012f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80012fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012fe:	fab2 f282 	clz	r2, r2
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	f042 0220 	orr.w	r2, r2, #32
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f002 021f 	and.w	r2, r2, #31
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0ab      	beq.n	8001272 <HAL_RCC_OscConfig+0x186>
 800131a:	e05c      	b.n	80013d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fbb0 	bl	8000a80 <HAL_GetTick>
 8001320:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001326:	f7ff fbab 	bl	8000a80 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d902      	bls.n	800133c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	f000 bde6 	b.w	8001f08 <HAL_RCC_OscConfig+0xe1c>
 800133c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001340:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001350:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d102      	bne.n	800136e <HAL_RCC_OscConfig+0x282>
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	e015      	b.n	800139a <HAL_RCC_OscConfig+0x2ae>
 800136e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001372:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001386:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800138a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_RCC_OscConfig+0x2e4>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800139e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80013a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80013a6:	fa92 f2a2 	rbit	r2, r2
 80013aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80013ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013b2:	fab2 f282 	clz	r2, r2
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	f042 0220 	orr.w	r2, r2, #32
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	f002 021f 	and.w	r2, r2, #31
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f202 	lsl.w	r2, r1, r2
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ab      	bne.n	8001326 <HAL_RCC_OscConfig+0x23a>
 80013ce:	e002      	b.n	80013d6 <HAL_RCC_OscConfig+0x2ea>
 80013d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 8170 	beq.w	80016c6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013e6:	4bd0      	ldr	r3, [pc, #832]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00c      	beq.n	800140c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013f2:	4bcd      	ldr	r3, [pc, #820]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d16d      	bne.n	80014da <HAL_RCC_OscConfig+0x3ee>
 80013fe:	4bca      	ldr	r3, [pc, #808]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800140a:	d166      	bne.n	80014da <HAL_RCC_OscConfig+0x3ee>
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800141e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	095b      	lsrs	r3, r3, #5
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x350>
 8001436:	4bbc      	ldr	r3, [pc, #752]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	e013      	b.n	8001464 <HAL_RCC_OscConfig+0x378>
 800143c:	2302      	movs	r3, #2
 800143e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001442:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001454:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001460:	4bb1      	ldr	r3, [pc, #708]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	2202      	movs	r2, #2
 8001466:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800146a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800146e:	fa92 f2a2 	rbit	r2, r2
 8001472:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001476:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800147a:	fab2 f282 	clz	r2, r2
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f042 0220 	orr.w	r2, r2, #32
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	f002 021f 	and.w	r2, r2, #31
 800148a:	2101      	movs	r1, #1
 800148c:	fa01 f202 	lsl.w	r2, r1, r2
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <HAL_RCC_OscConfig+0x3ba>
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d002      	beq.n	80014a6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f000 bd31 	b.w	8001f08 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	4ba0      	ldr	r3, [pc, #640]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	21f8      	movs	r1, #248	; 0xf8
 80014b6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80014be:	fa91 f1a1 	rbit	r1, r1
 80014c2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80014c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014ca:	fab1 f181 	clz	r1, r1
 80014ce:	b2c9      	uxtb	r1, r1
 80014d0:	408b      	lsls	r3, r1
 80014d2:	4995      	ldr	r1, [pc, #596]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d8:	e0f5      	b.n	80016c6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 8085 	beq.w	80015f0 <HAL_RCC_OscConfig+0x504>
 80014e6:	2301      	movs	r3, #1
 80014e8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80014f8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fc:	fab3 f383 	clz	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001506:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	461a      	mov	r2, r3
 800150e:	2301      	movs	r3, #1
 8001510:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fab5 	bl	8000a80 <HAL_GetTick>
 8001516:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	e00a      	b.n	8001532 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fab0 	bl	8000a80 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d902      	bls.n	8001532 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	f000 bceb 	b.w	8001f08 <HAL_RCC_OscConfig+0xe1c>
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001544:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	fab3 f383 	clz	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b01      	cmp	r3, #1
 800155a:	d102      	bne.n	8001562 <HAL_RCC_OscConfig+0x476>
 800155c:	4b72      	ldr	r3, [pc, #456]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	e013      	b.n	800158a <HAL_RCC_OscConfig+0x49e>
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800157a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001586:	4b68      	ldr	r3, [pc, #416]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	2202      	movs	r2, #2
 800158c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001590:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001594:	fa92 f2a2 	rbit	r2, r2
 8001598:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800159c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015a0:	fab2 f282 	clz	r2, r2
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	f042 0220 	orr.w	r2, r2, #32
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	f002 021f 	and.w	r2, r2, #31
 80015b0:	2101      	movs	r1, #1
 80015b2:	fa01 f202 	lsl.w	r2, r1, r2
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0af      	beq.n	800151c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	21f8      	movs	r1, #248	; 0xf8
 80015cc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80015d4:	fa91 f1a1 	rbit	r1, r1
 80015d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80015dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015e0:	fab1 f181 	clz	r1, r1
 80015e4:	b2c9      	uxtb	r1, r1
 80015e6:	408b      	lsls	r3, r1
 80015e8:	494f      	ldr	r1, [pc, #316]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
 80015ee:	e06a      	b.n	80016c6 <HAL_RCC_OscConfig+0x5da>
 80015f0:	2301      	movs	r3, #1
 80015f2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001602:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001610:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	461a      	mov	r2, r3
 8001618:	2300      	movs	r3, #0
 800161a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fa30 	bl	8000a80 <HAL_GetTick>
 8001620:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff fa2b 	bl	8000a80 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d902      	bls.n	800163c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	f000 bc66 	b.w	8001f08 <HAL_RCC_OscConfig+0xe1c>
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800164e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d102      	bne.n	800166c <HAL_RCC_OscConfig+0x580>
 8001666:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	e013      	b.n	8001694 <HAL_RCC_OscConfig+0x5a8>
 800166c:	2302      	movs	r3, #2
 800166e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001684:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_RCC_OscConfig+0x63c>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	2202      	movs	r2, #2
 8001696:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800169a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800169e:	fa92 f2a2 	rbit	r2, r2
 80016a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80016a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016aa:	fab2 f282 	clz	r2, r2
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f042 0220 	orr.w	r2, r2, #32
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	f002 021f 	and.w	r2, r2, #31
 80016ba:	2101      	movs	r1, #1
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1af      	bne.n	8001626 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80da 	beq.w	800188a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d069      	beq.n	80017b4 <HAL_RCC_OscConfig+0x6c8>
 80016e0:	2301      	movs	r3, #1
 80016e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80016f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_RCC_OscConfig+0x640>)
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	461a      	mov	r2, r3
 8001706:	2301      	movs	r3, #1
 8001708:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170a:	f7ff f9b9 	bl	8000a80 <HAL_GetTick>
 800170e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	e00d      	b.n	8001730 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff f9b4 	bl	8000a80 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d905      	bls.n	8001730 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e3ef      	b.n	8001f08 <HAL_RCC_OscConfig+0xe1c>
 8001728:	40021000 	.word	0x40021000
 800172c:	10908120 	.word	0x10908120
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800173a:	fa93 f2a3 	rbit	r2, r3
 800173e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001748:	2202      	movs	r2, #2
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	fa93 f2a3 	rbit	r2, r3
 8001756:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001760:	2202      	movs	r2, #2
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001772:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001774:	4ba4      	ldr	r3, [pc, #656]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001778:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800177c:	2102      	movs	r1, #2
 800177e:	6019      	str	r1, [r3, #0]
 8001780:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f1a3 	rbit	r1, r3
 800178a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800178e:	6019      	str	r1, [r3, #0]
  return result;
 8001790:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	2101      	movs	r1, #1
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0b0      	beq.n	8001714 <HAL_RCC_OscConfig+0x628>
 80017b2:	e06a      	b.n	800188a <HAL_RCC_OscConfig+0x79e>
 80017b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017ca:	601a      	str	r2, [r3, #0]
  return result;
 80017cc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	4b8c      	ldr	r3, [pc, #560]	; (8001a0c <HAL_RCC_OscConfig+0x920>)
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	461a      	mov	r2, r3
 80017e2:	2300      	movs	r3, #0
 80017e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff f94b 	bl	8000a80 <HAL_GetTick>
 80017ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ee:	e009      	b.n	8001804 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff f946 	bl	8000a80 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e381      	b.n	8001f08 <HAL_RCC_OscConfig+0xe1c>
 8001804:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001808:	2202      	movs	r2, #2
 800180a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f2a3 	rbit	r2, r3
 800182e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001838:	2202      	movs	r2, #2
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800184a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	4b6e      	ldr	r3, [pc, #440]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 800184e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001850:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001854:	2102      	movs	r1, #2
 8001856:	6019      	str	r1, [r3, #0]
 8001858:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	fa93 f1a3 	rbit	r1, r3
 8001862:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001866:	6019      	str	r1, [r3, #0]
  return result;
 8001868:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1b2      	bne.n	80017f0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 8157 	beq.w	8001b48 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d112      	bne.n	80018d2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ac:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	4a55      	ldr	r2, [pc, #340]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 80018b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b6:	61d3      	str	r3, [r2, #28]
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	4b4f      	ldr	r3, [pc, #316]	; (8001a10 <HAL_RCC_OscConfig+0x924>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d11a      	bne.n	8001914 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018de:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <HAL_RCC_OscConfig+0x924>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a4b      	ldr	r2, [pc, #300]	; (8001a10 <HAL_RCC_OscConfig+0x924>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ea:	f7ff f8c9 	bl	8000a80 <HAL_GetTick>
 80018ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	e009      	b.n	8001908 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7ff f8c4 	bl	8000a80 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b64      	cmp	r3, #100	; 0x64
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e2ff      	b.n	8001f08 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <HAL_RCC_OscConfig+0x924>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ef      	beq.n	80018f4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x840>
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a39      	ldr	r2, [pc, #228]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6213      	str	r3, [r2, #32]
 800192a:	e02f      	b.n	800198c <HAL_RCC_OscConfig+0x8a0>
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x864>
 8001936:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a30      	ldr	r2, [pc, #192]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	6213      	str	r3, [r2, #32]
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0x8a0>
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b05      	cmp	r3, #5
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x888>
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6213      	str	r3, [r2, #32]
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0x8a0>
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a23      	ldr	r2, [pc, #140]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001986:	f023 0304 	bic.w	r3, r3, #4
 800198a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d06a      	beq.n	8001a6c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff f873 	bl	8000a80 <HAL_GetTick>
 800199a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff f86e 	bl	8000a80 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e2a7      	b.n	8001f08 <HAL_RCC_OscConfig+0xe1c>
 80019b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019d4:	2202      	movs	r2, #2
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	fa93 f2a3 	rbit	r2, r3
 80019e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019e6:	601a      	str	r2, [r3, #0]
  return result;
 80019e8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	095b      	lsrs	r3, r3, #5
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d108      	bne.n	8001a14 <HAL_RCC_OscConfig+0x928>
 8001a02:	4b01      	ldr	r3, [pc, #4]	; (8001a08 <HAL_RCC_OscConfig+0x91c>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	e013      	b.n	8001a30 <HAL_RCC_OscConfig+0x944>
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	10908120 	.word	0x10908120
 8001a10:	40007000 	.word	0x40007000
 8001a14:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a18:	2202      	movs	r2, #2
 8001a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4bc0      	ldr	r3, [pc, #768]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a34:	2102      	movs	r1, #2
 8001a36:	6011      	str	r1, [r2, #0]
 8001a38:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	fa92 f1a2 	rbit	r1, r2
 8001a42:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a46:	6011      	str	r1, [r2, #0]
  return result;
 8001a48:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	fab2 f282 	clz	r2, r2
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	f002 021f 	and.w	r2, r2, #31
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d09a      	beq.n	80019a0 <HAL_RCC_OscConfig+0x8b4>
 8001a6a:	e063      	b.n	8001b34 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff f808 	bl	8000a80 <HAL_GetTick>
 8001a70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	e00b      	b.n	8001a8e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff f803 	bl	8000a80 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e23c      	b.n	8001f08 <HAL_RCC_OscConfig+0xe1c>
 8001a8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a92:	2202      	movs	r2, #2
 8001a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aaa:	2202      	movs	r2, #2
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001abc:	601a      	str	r2, [r3, #0]
  return result;
 8001abe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ac2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d102      	bne.n	8001ade <HAL_RCC_OscConfig+0x9f2>
 8001ad8:	4b95      	ldr	r3, [pc, #596]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	e00d      	b.n	8001afa <HAL_RCC_OscConfig+0xa0e>
 8001ade:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	4b8e      	ldr	r3, [pc, #568]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001afe:	2102      	movs	r1, #2
 8001b00:	6011      	str	r1, [r2, #0]
 8001b02:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	fa92 f1a2 	rbit	r1, r2
 8001b0c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b10:	6011      	str	r1, [r2, #0]
  return result;
 8001b12:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	fab2 f282 	clz	r2, r2
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	f002 021f 	and.w	r2, r2, #31
 8001b28:	2101      	movs	r1, #1
 8001b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1a0      	bne.n	8001a76 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b34:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b7c      	ldr	r3, [pc, #496]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	4a7b      	ldr	r2, [pc, #492]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b46:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 81d9 	beq.w	8001f06 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b54:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	f000 81a6 	beq.w	8001eae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	f040 811e 	bne.w	8001daa <HAL_RCC_OscConfig+0xcbe>
 8001b6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fa93 f2a3 	rbit	r2, r3
 8001b82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b86:	601a      	str	r2, [r3, #0]
  return result;
 8001b88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b8c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ff6c 	bl	8000a80 <HAL_GetTick>
 8001ba8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bac:	e009      	b.n	8001bc2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bae:	f7fe ff67 	bl	8000a80 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1a2      	b.n	8001f08 <HAL_RCC_OscConfig+0xe1c>
 8001bc2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	fa93 f2a3 	rbit	r2, r3
 8001bd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bda:	601a      	str	r2, [r3, #0]
  return result;
 8001bdc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001be0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	095b      	lsrs	r3, r3, #5
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCC_OscConfig+0xb10>
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	e01b      	b.n	8001c34 <HAL_RCC_OscConfig+0xb48>
 8001bfc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f2a3 	rbit	r2, r3
 8001c10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c3c:	6011      	str	r1, [r2, #0]
 8001c3e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	fa92 f1a2 	rbit	r1, r2
 8001c48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c4c:	6011      	str	r1, [r2, #0]
  return result;
 8001c4e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	fab2 f282 	clz	r2, r2
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f042 0220 	orr.w	r2, r2, #32
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	f002 021f 	and.w	r2, r2, #31
 8001c64:	2101      	movs	r1, #1
 8001c66:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d19e      	bne.n	8001bae <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f023 020f 	bic.w	r2, r3, #15
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	492c      	ldr	r1, [pc, #176]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a19      	ldr	r1, [r3, #32]
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	4925      	ldr	r1, [pc, #148]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
 8001ca0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ca4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	fa93 f2a3 	rbit	r2, r3
 8001cb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cb8:	601a      	str	r2, [r3, #0]
  return result;
 8001cba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cbe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fed3 	bl	8000a80 <HAL_GetTick>
 8001cda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cde:	e009      	b.n	8001cf4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7fe fece 	bl	8000a80 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e109      	b.n	8001f08 <HAL_RCC_OscConfig+0xe1c>
 8001cf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	fa93 f2a3 	rbit	r2, r3
 8001d08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d0c:	601a      	str	r2, [r3, #0]
  return result;
 8001d0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0xc48>
 8001d28:	4b01      	ldr	r3, [pc, #4]	; (8001d30 <HAL_RCC_OscConfig+0xc44>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	e01e      	b.n	8001d6c <HAL_RCC_OscConfig+0xc80>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_OscConfig+0xe28>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d74:	6011      	str	r1, [r2, #0]
 8001d76:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	fa92 f1a2 	rbit	r1, r2
 8001d80:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d84:	6011      	str	r1, [r2, #0]
  return result;
 8001d86:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	fab2 f282 	clz	r2, r2
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f042 0220 	orr.w	r2, r2, #32
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f002 021f 	and.w	r2, r2, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d09b      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xbf4>
 8001da8:	e0ad      	b.n	8001f06 <HAL_RCC_OscConfig+0xe1a>
 8001daa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	fa93 f2a3 	rbit	r2, r3
 8001dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc2:	601a      	str	r2, [r3, #0]
  return result;
 8001dc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe fe4e 	bl	8000a80 <HAL_GetTick>
 8001de4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de8:	e009      	b.n	8001dfe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7fe fe49 	bl	8000a80 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e084      	b.n	8001f08 <HAL_RCC_OscConfig+0xe1c>
 8001dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	fa93 f2a3 	rbit	r2, r3
 8001e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e16:	601a      	str	r2, [r3, #0]
  return result;
 8001e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d102      	bne.n	8001e38 <HAL_RCC_OscConfig+0xd4c>
 8001e32:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_RCC_OscConfig+0xe28>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	e01b      	b.n	8001e70 <HAL_RCC_OscConfig+0xd84>
 8001e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f107 0320 	add.w	r3, r7, #32
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f107 0318 	add.w	r3, r7, #24
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_RCC_OscConfig+0xe28>)
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	f107 0214 	add.w	r2, r7, #20
 8001e74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e78:	6011      	str	r1, [r2, #0]
 8001e7a:	f107 0214 	add.w	r2, r7, #20
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	fa92 f1a2 	rbit	r1, r2
 8001e84:	f107 0210 	add.w	r2, r7, #16
 8001e88:	6011      	str	r1, [r2, #0]
  return result;
 8001e8a:	f107 0210 	add.w	r2, r7, #16
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	fab2 f282 	clz	r2, r2
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f042 0220 	orr.w	r2, r2, #32
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f002 021f 	and.w	r2, r2, #31
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d19e      	bne.n	8001dea <HAL_RCC_OscConfig+0xcfe>
 8001eac:	e02b      	b.n	8001f06 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e025      	b.n	8001f08 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_RCC_OscConfig+0xe28>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <HAL_RCC_OscConfig+0xe28>)
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ecc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ed0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d111      	bne.n	8001f02 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ede:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ee2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d108      	bne.n	8001f02 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ef0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b09e      	sub	sp, #120	; 0x78
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e162      	b.n	80021f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b90      	ldr	r3, [pc, #576]	; (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d910      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b8d      	ldr	r3, [pc, #564]	; (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	498b      	ldr	r1, [pc, #556]	; (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b89      	ldr	r3, [pc, #548]	; (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e14a      	b.n	80021f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b82      	ldr	r3, [pc, #520]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	497f      	ldr	r1, [pc, #508]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80dc 	beq.w	8002144 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d13c      	bne.n	800200e <HAL_RCC_ClockConfig+0xf6>
 8001f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d102      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xa6>
 8001fb8:	4b6f      	ldr	r3, [pc, #444]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	e00f      	b.n	8001fde <HAL_RCC_ClockConfig+0xc6>
 8001fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	667b      	str	r3, [r7, #100]	; 0x64
 8001fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8001fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fe6:	fa92 f2a2 	rbit	r2, r2
 8001fea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fee:	fab2 f282 	clz	r2, r2
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	f042 0220 	orr.w	r2, r2, #32
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	f002 021f 	and.w	r2, r2, #31
 8001ffe:	2101      	movs	r1, #1
 8002000:	fa01 f202 	lsl.w	r2, r1, r2
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d17b      	bne.n	8002102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e0f3      	b.n	80021f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d13c      	bne.n	8002090 <HAL_RCC_ClockConfig+0x178>
 8002016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d102      	bne.n	8002040 <HAL_RCC_ClockConfig+0x128>
 800203a:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	e00f      	b.n	8002060 <HAL_RCC_ClockConfig+0x148>
 8002040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002044:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	647b      	str	r3, [r7, #68]	; 0x44
 800204e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002052:	643b      	str	r3, [r7, #64]	; 0x40
 8002054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800205c:	4b46      	ldr	r3, [pc, #280]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002064:	63ba      	str	r2, [r7, #56]	; 0x38
 8002066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002068:	fa92 f2a2 	rbit	r2, r2
 800206c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800206e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002070:	fab2 f282 	clz	r2, r2
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f042 0220 	orr.w	r2, r2, #32
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	f002 021f 	and.w	r2, r2, #31
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d13a      	bne.n	8002102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0b2      	b.n	80021f6 <HAL_RCC_ClockConfig+0x2de>
 8002090:	2302      	movs	r3, #2
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d102      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x1a0>
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	e00d      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1bc>
 80020b8:	2302      	movs	r3, #2
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
 80020c4:	2302      	movs	r3, #2
 80020c6:	623b      	str	r3, [r7, #32]
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	2202      	movs	r2, #2
 80020d6:	61ba      	str	r2, [r7, #24]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	fa92 f2a2 	rbit	r2, r2
 80020de:	617a      	str	r2, [r7, #20]
  return result;
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e079      	b.n	80021f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	491a      	ldr	r1, [pc, #104]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002114:	f7fe fcb4 	bl	8000a80 <HAL_GetTick>
 8002118:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	e00a      	b.n	8002132 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211c:	f7fe fcb0 	bl	8000a80 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e061      	b.n	80021f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 020c 	and.w	r2, r3, #12
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	429a      	cmp	r2, r3
 8002142:	d1eb      	bne.n	800211c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d214      	bcs.n	800217c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	4906      	ldr	r1, [pc, #24]	; (8002174 <HAL_RCC_ClockConfig+0x25c>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e040      	b.n	80021f6 <HAL_RCC_ClockConfig+0x2de>
 8002174:	40022000 	.word	0x40022000
 8002178:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_RCC_ClockConfig+0x2e8>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	491a      	ldr	r1, [pc, #104]	; (8002200 <HAL_RCC_ClockConfig+0x2e8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_RCC_ClockConfig+0x2e8>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4912      	ldr	r1, [pc, #72]	; (8002200 <HAL_RCC_ClockConfig+0x2e8>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021ba:	f000 f829 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021be:	4601      	mov	r1, r0
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_RCC_ClockConfig+0x2e8>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c8:	22f0      	movs	r2, #240	; 0xf0
 80021ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	fa92 f2a2 	rbit	r2, r2
 80021d2:	60fa      	str	r2, [r7, #12]
  return result;
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	fab2 f282 	clz	r2, r2
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	40d3      	lsrs	r3, r2
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x2ec>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	fa21 f303 	lsr.w	r3, r1, r3
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_RCC_ClockConfig+0x2f0>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_RCC_ClockConfig+0x2f4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fc02 	bl	80009f8 <HAL_InitTick>
  
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3778      	adds	r7, #120	; 0x78
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	080041c4 	.word	0x080041c4
 8002208:	20000004 	.word	0x20000004
 800220c:	20000008 	.word	0x20000008

08002210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b08b      	sub	sp, #44	; 0x2c
 8002214:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b04      	cmp	r3, #4
 8002238:	d002      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x30>
 800223a:	2b08      	cmp	r3, #8
 800223c:	d003      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0x36>
 800223e:	e03f      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002242:	623b      	str	r3, [r7, #32]
      break;
 8002244:	e03f      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800224c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002250:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	607a      	str	r2, [r7, #4]
  return result;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	40d3      	lsrs	r3, r2
 8002264:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	220f      	movs	r2, #15
 8002274:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	fa92 f2a2 	rbit	r2, r2
 800227c:	60fa      	str	r2, [r7, #12]
  return result;
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	fab2 f282 	clz	r2, r2
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	40d3      	lsrs	r3, r2
 8002288:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800228a:	5cd3      	ldrb	r3, [r2, r3]
 800228c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	e007      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	623b      	str	r3, [r7, #32]
      break;
 80022be:	e002      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022c2:	623b      	str	r3, [r7, #32]
      break;
 80022c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c6:	6a3b      	ldr	r3, [r7, #32]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	372c      	adds	r7, #44	; 0x2c
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40021000 	.word	0x40021000
 80022d8:	007a1200 	.word	0x007a1200
 80022dc:	080041dc 	.word	0x080041dc
 80022e0:	080041ec 	.word	0x080041ec

080022e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002302:	f7ff ffef 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002306:	4601      	mov	r1, r0
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002310:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002314:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	fa92 f2a2 	rbit	r2, r2
 800231c:	603a      	str	r2, [r7, #0]
  return result;
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	fab2 f282 	clz	r2, r2
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	40d3      	lsrs	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_RCC_GetPCLK1Freq+0x40>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	080041d4 	.word	0x080041d4

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002346:	f7ff ffcd 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 800234a:	4601      	mov	r1, r0
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002354:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002358:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	fa92 f2a2 	rbit	r2, r2
 8002360:	603a      	str	r2, [r7, #0]
  return result;
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	40d3      	lsrs	r3, r2
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x40>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	080041d4 	.word	0x080041d4

08002384 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b092      	sub	sp, #72	; 0x48
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80d4 	beq.w	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a8:	4b4e      	ldr	r3, [pc, #312]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10e      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	4a4a      	ldr	r2, [pc, #296]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023be:	61d3      	str	r3, [r2, #28]
 80023c0:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b45      	ldr	r3, [pc, #276]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b42      	ldr	r3, [pc, #264]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a41      	ldr	r2, [pc, #260]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7fe fb49 	bl	8000a80 <HAL_GetTick>
 80023ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7fe fb45 	bl	8000a80 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	; 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e1d6      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002410:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002418:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800241a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8084 	beq.w	800252a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800242c:	429a      	cmp	r2, r3
 800242e:	d07c      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002430:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800243a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	4b26      	ldr	r3, [pc, #152]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	461a      	mov	r2, r3
 800245a:	2301      	movs	r3, #1
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002462:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800246c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	461a      	mov	r2, r3
 800247e:	2300      	movs	r3, #0
 8002480:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002482:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002486:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d04b      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7fe faf5 	bl	8000a80 <HAL_GetTick>
 8002496:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe faf1 	bl	8000a80 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e180      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80024b0:	2302      	movs	r3, #2
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
 80024bc:	2302      	movs	r3, #2
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	61fb      	str	r3, [r7, #28]
  return result;
 80024c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d108      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80024de:	4b01      	ldr	r3, [pc, #4]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	e00d      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
 80024ec:	10908100 	.word	0x10908100
 80024f0:	2302      	movs	r3, #2
 80024f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	4ba0      	ldr	r3, [pc, #640]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2202      	movs	r2, #2
 8002502:	613a      	str	r2, [r7, #16]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	fa92 f2a2 	rbit	r2, r2
 800250a:	60fa      	str	r2, [r7, #12]
  return result;
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	fab2 f282 	clz	r2, r2
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f002 021f 	and.w	r2, r2, #31
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f202 	lsl.w	r2, r1, r2
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0b7      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800252a:	4b95      	ldr	r3, [pc, #596]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4992      	ldr	r1, [pc, #584]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002538:	4313      	orrs	r3, r2
 800253a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800253c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002544:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4a8d      	ldr	r2, [pc, #564]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800254a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800255c:	4b88      	ldr	r3, [pc, #544]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f023 0203 	bic.w	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4985      	ldr	r1, [pc, #532]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800257a:	4b81      	ldr	r3, [pc, #516]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	497e      	ldr	r1, [pc, #504]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002598:	4b79      	ldr	r3, [pc, #484]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	4976      	ldr	r1, [pc, #472]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025b6:	4b72      	ldr	r3, [pc, #456]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f023 0210 	bic.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	496f      	ldr	r1, [pc, #444]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	4967      	ldr	r1, [pc, #412]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d008      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f023 0220 	bic.w	r2, r3, #32
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4960      	ldr	r1, [pc, #384]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002600:	4313      	orrs	r3, r2
 8002602:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002610:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	4958      	ldr	r1, [pc, #352]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800262e:	4b54      	ldr	r3, [pc, #336]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	4951      	ldr	r1, [pc, #324]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800263c:	4313      	orrs	r3, r2
 800263e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800264c:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4949      	ldr	r1, [pc, #292]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800266a:	4b45      	ldr	r3, [pc, #276]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4942      	ldr	r1, [pc, #264]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002688:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	493a      	ldr	r1, [pc, #232]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026a6:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	4933      	ldr	r1, [pc, #204]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026c4:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d0:	492b      	ldr	r1, [pc, #172]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80026e2:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4924      	ldr	r1, [pc, #144]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	491c      	ldr	r1, [pc, #112]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800271e:	4b18      	ldr	r3, [pc, #96]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	4915      	ldr	r1, [pc, #84]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	490d      	ldr	r1, [pc, #52]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800274a:	4313      	orrs	r3, r2
 800274c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002766:	4906      	ldr	r1, [pc, #24]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002778:	4b01      	ldr	r3, [pc, #4]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	e002      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278c:	490b      	ldr	r1, [pc, #44]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800278e:	4313      	orrs	r3, r2
 8002790:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027aa:	4904      	ldr	r1, [pc, #16]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3748      	adds	r7, #72	; 0x48
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000

080027c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e040      	b.n	8002854 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe f802 	bl	80007ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2224      	movs	r2, #36	; 0x24
 80027ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fb1e 	bl	8002e40 <UART_SetConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e022      	b.n	8002854 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fce8 	bl	80031ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800282a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800283a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fd6f 	bl	8003330 <UART_CheckIdleState>
 8002852:	4603      	mov	r3, r0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002870:	2b20      	cmp	r3, #32
 8002872:	f040 8082 	bne.w	800297a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_UART_Transmit+0x26>
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07a      	b.n	800297c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_UART_Transmit+0x38>
 8002890:	2302      	movs	r3, #2
 8002892:	e073      	b.n	800297c <HAL_UART_Transmit+0x120>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2221      	movs	r2, #33	; 0x21
 80028a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028aa:	f7fe f8e9 	bl	8000a80 <HAL_GetTick>
 80028ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c8:	d108      	bne.n	80028dc <HAL_UART_Transmit+0x80>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d104      	bne.n	80028dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	e003      	b.n	80028e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80028ec:	e02d      	b.n	800294a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2180      	movs	r1, #128	; 0x80
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fd62 	bl	80033c2 <UART_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e039      	b.n	800297c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10b      	bne.n	8002926 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	881a      	ldrh	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800291a:	b292      	uxth	r2, r2
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	3302      	adds	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
 8002924:	e008      	b.n	8002938 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	781a      	ldrb	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	b292      	uxth	r2, r2
 8002930:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3301      	adds	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1cb      	bne.n	80028ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	2140      	movs	r1, #64	; 0x40
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fd2e 	bl	80033c2 <UART_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e005      	b.n	800297c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002996:	2b20      	cmp	r3, #32
 8002998:	d12c      	bne.n	80029f4 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_UART_Receive_IT+0x22>
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e025      	b.n	80029f6 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_UART_Receive_IT+0x34>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e01e      	b.n	80029f6 <HAL_UART_Receive_IT+0x72>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029e2:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fd66 	bl	80034bc <UART_Start_Receive_IT>
 80029f0:	4603      	mov	r3, r0
 80029f2:	e000      	b.n	80029f6 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d113      	bne.n	8002a58 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00e      	beq.n	8002a58 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d009      	beq.n	8002a58 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 81cc 	beq.w	8002de6 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
      }
      return;
 8002a56:	e1c6      	b.n	8002de6 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80e3 	beq.w	8002c26 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4ba5      	ldr	r3, [pc, #660]	; (8002d04 <HAL_UART_IRQHandler+0x304>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80d8 	beq.w	8002c26 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d010      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xa2>
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d010      	beq.n	8002ace <HAL_UART_IRQHandler+0xce>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2202      	movs	r2, #2
 8002abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ac4:	f043 0204 	orr.w	r2, r3, #4
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d010      	beq.n	8002afa <HAL_UART_IRQHandler+0xfa>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af0:	f043 0202 	orr.w	r2, r3, #2
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d015      	beq.n	8002b30 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d104      	bne.n	8002b18 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b26:	f043 0208 	orr.w	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d011      	beq.n	8002b5e <HAL_UART_IRQHandler+0x15e>
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00c      	beq.n	8002b5e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8140 	beq.w	8002dea <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00c      	beq.n	8002b8e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d004      	beq.n	8002bae <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d031      	beq.n	8002c12 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fd0c 	bl	80035cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d123      	bne.n	8002c0a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d013      	beq.n	8002c02 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a4a      	ldr	r2, [pc, #296]	; (8002d08 <HAL_UART_IRQHandler+0x308>)
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe f8a0 	bl	8000d2c <HAL_DMA_Abort_IT>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d017      	beq.n	8002c22 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c00:	e00f      	b.n	8002c22 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f906 	bl	8002e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	e00b      	b.n	8002c22 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f902 	bl	8002e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	e007      	b.n	8002c22 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8fe 	bl	8002e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002c20:	e0e3      	b.n	8002dea <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c22:	bf00      	nop
    return;
 8002c24:	e0e1      	b.n	8002dea <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	f040 80a7 	bne.w	8002d7e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80a1 	beq.w	8002d7e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 809b 	beq.w	8002d7e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d156      	bne.n	8002d0c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8002c68:	893b      	ldrh	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80bf 	beq.w	8002dee <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c76:	893a      	ldrh	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	f080 80b8 	bcs.w	8002dee <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	893a      	ldrh	r2, [r7, #8]
 8002c82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d02a      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cbe:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0210 	bic.w	r2, r2, #16
 8002cda:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd ffea 	bl	8000cba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f894 	bl	8002e28 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d00:	e075      	b.n	8002dee <HAL_UART_IRQHandler+0x3ee>
 8002d02:	bf00      	nop
 8002d04:	04000120 	.word	0x04000120
 8002d08:	0800362b 	.word	0x0800362b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d063      	beq.n	8002df2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d060      	beq.n	8002df2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0210 	bic.w	r2, r2, #16
 8002d70:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	4619      	mov	r1, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f856 	bl	8002e28 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d7c:	e039      	b.n	8002df2 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_UART_IRQHandler+0x3a4>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fd47 	bl	8003830 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002da2:	e029      	b.n	8002df8 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01a      	beq.n	8002df6 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
    }
    return;
 8002dc8:	e015      	b.n	8002df6 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d011      	beq.n	8002df8 <HAL_UART_IRQHandler+0x3f8>
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fc39 	bl	8003656 <UART_EndTransmit_IT>
    return;
 8002de4:	e008      	b.n	8002df8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8002de6:	bf00      	nop
 8002de8:	e006      	b.n	8002df8 <HAL_UART_IRQHandler+0x3f8>
    return;
 8002dea:	bf00      	nop
 8002dec:	e004      	b.n	8002df8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8002dee:	bf00      	nop
 8002df0:	e002      	b.n	8002df8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <HAL_UART_IRQHandler+0x3f8>
    return;
 8002df6:	bf00      	nop
  }

}
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop

08002e00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4bab      	ldr	r3, [pc, #684]	; (8003118 <UART_SetConfig+0x2d8>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	6979      	ldr	r1, [r7, #20]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a99      	ldr	r2, [pc, #612]	; (800311c <UART_SetConfig+0x2dc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d120      	bne.n	8002efe <UART_SetConfig+0xbe>
 8002ebc:	4b98      	ldr	r3, [pc, #608]	; (8003120 <UART_SetConfig+0x2e0>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d817      	bhi.n	8002ef8 <UART_SetConfig+0xb8>
 8002ec8:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <UART_SetConfig+0x90>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002eed 	.word	0x08002eed
 8002ed8:	08002ef3 	.word	0x08002ef3
 8002edc:	08002ee7 	.word	0x08002ee7
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e0b5      	b.n	8003052 <UART_SetConfig+0x212>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e0b2      	b.n	8003052 <UART_SetConfig+0x212>
 8002eec:	2304      	movs	r3, #4
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e0af      	b.n	8003052 <UART_SetConfig+0x212>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	77fb      	strb	r3, [r7, #31]
 8002ef6:	e0ac      	b.n	8003052 <UART_SetConfig+0x212>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	e0a9      	b.n	8003052 <UART_SetConfig+0x212>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a88      	ldr	r2, [pc, #544]	; (8003124 <UART_SetConfig+0x2e4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d124      	bne.n	8002f52 <UART_SetConfig+0x112>
 8002f08:	4b85      	ldr	r3, [pc, #532]	; (8003120 <UART_SetConfig+0x2e0>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f14:	d011      	beq.n	8002f3a <UART_SetConfig+0xfa>
 8002f16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f1a:	d817      	bhi.n	8002f4c <UART_SetConfig+0x10c>
 8002f1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f20:	d011      	beq.n	8002f46 <UART_SetConfig+0x106>
 8002f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f26:	d811      	bhi.n	8002f4c <UART_SetConfig+0x10c>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <UART_SetConfig+0xf4>
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f30:	d006      	beq.n	8002f40 <UART_SetConfig+0x100>
 8002f32:	e00b      	b.n	8002f4c <UART_SetConfig+0x10c>
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e08b      	b.n	8003052 <UART_SetConfig+0x212>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e088      	b.n	8003052 <UART_SetConfig+0x212>
 8002f40:	2304      	movs	r3, #4
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e085      	b.n	8003052 <UART_SetConfig+0x212>
 8002f46:	2308      	movs	r3, #8
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e082      	b.n	8003052 <UART_SetConfig+0x212>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e07f      	b.n	8003052 <UART_SetConfig+0x212>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a74      	ldr	r2, [pc, #464]	; (8003128 <UART_SetConfig+0x2e8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d124      	bne.n	8002fa6 <UART_SetConfig+0x166>
 8002f5c:	4b70      	ldr	r3, [pc, #448]	; (8003120 <UART_SetConfig+0x2e0>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002f64:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f68:	d011      	beq.n	8002f8e <UART_SetConfig+0x14e>
 8002f6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f6e:	d817      	bhi.n	8002fa0 <UART_SetConfig+0x160>
 8002f70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f74:	d011      	beq.n	8002f9a <UART_SetConfig+0x15a>
 8002f76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f7a:	d811      	bhi.n	8002fa0 <UART_SetConfig+0x160>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <UART_SetConfig+0x148>
 8002f80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f84:	d006      	beq.n	8002f94 <UART_SetConfig+0x154>
 8002f86:	e00b      	b.n	8002fa0 <UART_SetConfig+0x160>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e061      	b.n	8003052 <UART_SetConfig+0x212>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e05e      	b.n	8003052 <UART_SetConfig+0x212>
 8002f94:	2304      	movs	r3, #4
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e05b      	b.n	8003052 <UART_SetConfig+0x212>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	77fb      	strb	r3, [r7, #31]
 8002f9e:	e058      	b.n	8003052 <UART_SetConfig+0x212>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e055      	b.n	8003052 <UART_SetConfig+0x212>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a60      	ldr	r2, [pc, #384]	; (800312c <UART_SetConfig+0x2ec>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d124      	bne.n	8002ffa <UART_SetConfig+0x1ba>
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <UART_SetConfig+0x2e0>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fbc:	d011      	beq.n	8002fe2 <UART_SetConfig+0x1a2>
 8002fbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fc2:	d817      	bhi.n	8002ff4 <UART_SetConfig+0x1b4>
 8002fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fc8:	d011      	beq.n	8002fee <UART_SetConfig+0x1ae>
 8002fca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fce:	d811      	bhi.n	8002ff4 <UART_SetConfig+0x1b4>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <UART_SetConfig+0x19c>
 8002fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd8:	d006      	beq.n	8002fe8 <UART_SetConfig+0x1a8>
 8002fda:	e00b      	b.n	8002ff4 <UART_SetConfig+0x1b4>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e037      	b.n	8003052 <UART_SetConfig+0x212>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e034      	b.n	8003052 <UART_SetConfig+0x212>
 8002fe8:	2304      	movs	r3, #4
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e031      	b.n	8003052 <UART_SetConfig+0x212>
 8002fee:	2308      	movs	r3, #8
 8002ff0:	77fb      	strb	r3, [r7, #31]
 8002ff2:	e02e      	b.n	8003052 <UART_SetConfig+0x212>
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e02b      	b.n	8003052 <UART_SetConfig+0x212>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a4c      	ldr	r2, [pc, #304]	; (8003130 <UART_SetConfig+0x2f0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d124      	bne.n	800304e <UART_SetConfig+0x20e>
 8003004:	4b46      	ldr	r3, [pc, #280]	; (8003120 <UART_SetConfig+0x2e0>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800300c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003010:	d011      	beq.n	8003036 <UART_SetConfig+0x1f6>
 8003012:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003016:	d817      	bhi.n	8003048 <UART_SetConfig+0x208>
 8003018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800301c:	d011      	beq.n	8003042 <UART_SetConfig+0x202>
 800301e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003022:	d811      	bhi.n	8003048 <UART_SetConfig+0x208>
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <UART_SetConfig+0x1f0>
 8003028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302c:	d006      	beq.n	800303c <UART_SetConfig+0x1fc>
 800302e:	e00b      	b.n	8003048 <UART_SetConfig+0x208>
 8003030:	2300      	movs	r3, #0
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e00d      	b.n	8003052 <UART_SetConfig+0x212>
 8003036:	2302      	movs	r3, #2
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e00a      	b.n	8003052 <UART_SetConfig+0x212>
 800303c:	2304      	movs	r3, #4
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e007      	b.n	8003052 <UART_SetConfig+0x212>
 8003042:	2308      	movs	r3, #8
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e004      	b.n	8003052 <UART_SetConfig+0x212>
 8003048:	2310      	movs	r3, #16
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e001      	b.n	8003052 <UART_SetConfig+0x212>
 800304e:	2310      	movs	r3, #16
 8003050:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305a:	d16d      	bne.n	8003138 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 800305c:	7ffb      	ldrb	r3, [r7, #31]
 800305e:	2b08      	cmp	r3, #8
 8003060:	d827      	bhi.n	80030b2 <UART_SetConfig+0x272>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <UART_SetConfig+0x228>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	0800308d 	.word	0x0800308d
 800306c:	08003095 	.word	0x08003095
 8003070:	0800309d 	.word	0x0800309d
 8003074:	080030b3 	.word	0x080030b3
 8003078:	080030a3 	.word	0x080030a3
 800307c:	080030b3 	.word	0x080030b3
 8003080:	080030b3 	.word	0x080030b3
 8003084:	080030b3 	.word	0x080030b3
 8003088:	080030ab 	.word	0x080030ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7ff f936 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 8003090:	61b8      	str	r0, [r7, #24]
        break;
 8003092:	e013      	b.n	80030bc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7ff f954 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8003098:	61b8      	str	r0, [r7, #24]
        break;
 800309a:	e00f      	b.n	80030bc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <UART_SetConfig+0x2f4>)
 800309e:	61bb      	str	r3, [r7, #24]
        break;
 80030a0:	e00c      	b.n	80030bc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a2:	f7ff f8b5 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80030a6:	61b8      	str	r0, [r7, #24]
        break;
 80030a8:	e008      	b.n	80030bc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ae:	61bb      	str	r3, [r7, #24]
        break;
 80030b0:	e004      	b.n	80030bc <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	77bb      	strb	r3, [r7, #30]
        break;
 80030ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8086 	beq.w	80031d0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	005a      	lsls	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	441a      	add	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	b29b      	uxth	r3, r3
 80030da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b0f      	cmp	r3, #15
 80030e0:	d916      	bls.n	8003110 <UART_SetConfig+0x2d0>
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e8:	d212      	bcs.n	8003110 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f023 030f 	bic.w	r3, r3, #15
 80030f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	b29a      	uxth	r2, r3
 8003100:	89fb      	ldrh	r3, [r7, #14]
 8003102:	4313      	orrs	r3, r2
 8003104:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	89fa      	ldrh	r2, [r7, #14]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	e05f      	b.n	80031d0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	77bb      	strb	r3, [r7, #30]
 8003114:	e05c      	b.n	80031d0 <UART_SetConfig+0x390>
 8003116:	bf00      	nop
 8003118:	efff69f3 	.word	0xefff69f3
 800311c:	40013800 	.word	0x40013800
 8003120:	40021000 	.word	0x40021000
 8003124:	40004400 	.word	0x40004400
 8003128:	40004800 	.word	0x40004800
 800312c:	40004c00 	.word	0x40004c00
 8003130:	40005000 	.word	0x40005000
 8003134:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003138:	7ffb      	ldrb	r3, [r7, #31]
 800313a:	2b08      	cmp	r3, #8
 800313c:	d827      	bhi.n	800318e <UART_SetConfig+0x34e>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <UART_SetConfig+0x304>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003169 	.word	0x08003169
 8003148:	08003171 	.word	0x08003171
 800314c:	08003179 	.word	0x08003179
 8003150:	0800318f 	.word	0x0800318f
 8003154:	0800317f 	.word	0x0800317f
 8003158:	0800318f 	.word	0x0800318f
 800315c:	0800318f 	.word	0x0800318f
 8003160:	0800318f 	.word	0x0800318f
 8003164:	08003187 	.word	0x08003187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7ff f8c8 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 800316c:	61b8      	str	r0, [r7, #24]
        break;
 800316e:	e013      	b.n	8003198 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003170:	f7ff f8e6 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8003174:	61b8      	str	r0, [r7, #24]
        break;
 8003176:	e00f      	b.n	8003198 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <UART_SetConfig+0x3a8>)
 800317a:	61bb      	str	r3, [r7, #24]
        break;
 800317c:	e00c      	b.n	8003198 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317e:	f7ff f847 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8003182:	61b8      	str	r0, [r7, #24]
        break;
 8003184:	e008      	b.n	8003198 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318a:	61bb      	str	r3, [r7, #24]
        break;
 800318c:	e004      	b.n	8003198 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	77bb      	strb	r3, [r7, #30]
        break;
 8003196:	bf00      	nop
    }

    if (pclk != 0U)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	085a      	lsrs	r2, r3, #1
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	441a      	add	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	d908      	bls.n	80031cc <UART_SetConfig+0x38c>
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d204      	bcs.n	80031cc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	e001      	b.n	80031d0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	007a1200 	.word	0x007a1200

080031ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01a      	beq.n	8003302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ea:	d10a      	bne.n	8003302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]
  }
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af02      	add	r7, sp, #8
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003340:	f7fd fb9e 	bl	8000a80 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b08      	cmp	r3, #8
 8003352:	d10e      	bne.n	8003372 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f82d 	bl	80033c2 <UART_WaitOnFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e023      	b.n	80033ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d10e      	bne.n	800339e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f817 	bl	80033c2 <UART_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00d      	b.n	80033ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d2:	e05e      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033da:	d05a      	beq.n	8003492 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033dc:	f7fd fb50 	bl	8000a80 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d302      	bcc.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d11b      	bne.n	800342a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003400:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e043      	b.n	80034b2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d02c      	beq.n	8003492 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003446:	d124      	bne.n	8003492 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003450:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003460:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e00f      	b.n	80034b2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4013      	ands	r3, r2
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	429a      	cmp	r2, r3
 80034a0:	bf0c      	ite	eq
 80034a2:	2301      	moveq	r3, #1
 80034a4:	2300      	movne	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d091      	beq.n	80033d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	4613      	mov	r3, r2
 80034c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ee:	d10e      	bne.n	800350e <UART_Start_Receive_IT+0x52>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d105      	bne.n	8003504 <UART_Start_Receive_IT+0x48>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80034fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003502:	e02d      	b.n	8003560 <UART_Start_Receive_IT+0xa4>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	22ff      	movs	r2, #255	; 0xff
 8003508:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800350c:	e028      	b.n	8003560 <UART_Start_Receive_IT+0xa4>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10d      	bne.n	8003532 <UART_Start_Receive_IT+0x76>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <UART_Start_Receive_IT+0x6c>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	22ff      	movs	r2, #255	; 0xff
 8003522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003526:	e01b      	b.n	8003560 <UART_Start_Receive_IT+0xa4>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	227f      	movs	r2, #127	; 0x7f
 800352c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003530:	e016      	b.n	8003560 <UART_Start_Receive_IT+0xa4>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353a:	d10d      	bne.n	8003558 <UART_Start_Receive_IT+0x9c>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <UART_Start_Receive_IT+0x92>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	227f      	movs	r2, #127	; 0x7f
 8003548:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800354c:	e008      	b.n	8003560 <UART_Start_Receive_IT+0xa4>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	223f      	movs	r2, #63	; 0x3f
 8003552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003556:	e003      	b.n	8003560 <UART_Start_Receive_IT+0xa4>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2222      	movs	r2, #34	; 0x22
 800356c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003586:	d107      	bne.n	8003598 <UART_Start_Receive_IT+0xdc>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d103      	bne.n	8003598 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <UART_Start_Receive_IT+0x108>)
 8003594:	665a      	str	r2, [r3, #100]	; 0x64
 8003596:	e002      	b.n	800359e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <UART_Start_Receive_IT+0x10c>)
 800359c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80035b4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	0800375d 	.word	0x0800375d
 80035c8:	08003689 	.word	0x08003689

080035cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0210 	bic.w	r2, r2, #16
 800360a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff fbe3 	bl	8002e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800366c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fbc0 	bl	8002e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003696:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800369c:	2b22      	cmp	r3, #34	; 0x22
 800369e:	d151      	bne.n	8003744 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036a6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80036a8:	89bb      	ldrh	r3, [r7, #12]
 80036aa:	b2d9      	uxtb	r1, r3
 80036ac:	89fb      	ldrh	r3, [r7, #14]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	400a      	ands	r2, r1
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d138      	bne.n	8003754 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036f0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10f      	bne.n	8003736 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0210 	bic.w	r2, r2, #16
 8003724:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800372c:	4619      	mov	r1, r3
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff fb7a 	bl	8002e28 <HAL_UARTEx_RxEventCallback>
 8003734:	e002      	b.n	800373c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fc fde8 	bl	800030c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003742:	e007      	b.n	8003754 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0208 	orr.w	r2, r2, #8
 8003752:	619a      	str	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800376a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003770:	2b22      	cmp	r3, #34	; 0x22
 8003772:	d151      	bne.n	8003818 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800377a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003782:	89ba      	ldrh	r2, [r7, #12]
 8003784:	89fb      	ldrh	r3, [r7, #14]
 8003786:	4013      	ands	r3, r2
 8003788:	b29a      	uxth	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	1c9a      	adds	r2, r3, #2
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d138      	bne.n	8003828 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037c4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d10f      	bne.n	800380a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0210 	bic.w	r2, r2, #16
 80037f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003800:	4619      	mov	r1, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fb10 	bl	8002e28 <HAL_UARTEx_RxEventCallback>
 8003808:	e002      	b.n	8003810 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fc fd7e 	bl	800030c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003816:	e007      	b.n	8003828 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0208 	orr.w	r2, r2, #8
 8003826:	619a      	str	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <__errno>:
 8003844:	4b01      	ldr	r3, [pc, #4]	; (800384c <__errno+0x8>)
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000010 	.word	0x20000010

08003850 <__libc_init_array>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	4d0d      	ldr	r5, [pc, #52]	; (8003888 <__libc_init_array+0x38>)
 8003854:	4c0d      	ldr	r4, [pc, #52]	; (800388c <__libc_init_array+0x3c>)
 8003856:	1b64      	subs	r4, r4, r5
 8003858:	10a4      	asrs	r4, r4, #2
 800385a:	2600      	movs	r6, #0
 800385c:	42a6      	cmp	r6, r4
 800385e:	d109      	bne.n	8003874 <__libc_init_array+0x24>
 8003860:	4d0b      	ldr	r5, [pc, #44]	; (8003890 <__libc_init_array+0x40>)
 8003862:	4c0c      	ldr	r4, [pc, #48]	; (8003894 <__libc_init_array+0x44>)
 8003864:	f000 fc4e 	bl	8004104 <_init>
 8003868:	1b64      	subs	r4, r4, r5
 800386a:	10a4      	asrs	r4, r4, #2
 800386c:	2600      	movs	r6, #0
 800386e:	42a6      	cmp	r6, r4
 8003870:	d105      	bne.n	800387e <__libc_init_array+0x2e>
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	f855 3b04 	ldr.w	r3, [r5], #4
 8003878:	4798      	blx	r3
 800387a:	3601      	adds	r6, #1
 800387c:	e7ee      	b.n	800385c <__libc_init_array+0xc>
 800387e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003882:	4798      	blx	r3
 8003884:	3601      	adds	r6, #1
 8003886:	e7f2      	b.n	800386e <__libc_init_array+0x1e>
 8003888:	08004230 	.word	0x08004230
 800388c:	08004230 	.word	0x08004230
 8003890:	08004230 	.word	0x08004230
 8003894:	08004234 	.word	0x08004234

08003898 <memset>:
 8003898:	4402      	add	r2, r0
 800389a:	4603      	mov	r3, r0
 800389c:	4293      	cmp	r3, r2
 800389e:	d100      	bne.n	80038a2 <memset+0xa>
 80038a0:	4770      	bx	lr
 80038a2:	f803 1b01 	strb.w	r1, [r3], #1
 80038a6:	e7f9      	b.n	800389c <memset+0x4>

080038a8 <siprintf>:
 80038a8:	b40e      	push	{r1, r2, r3}
 80038aa:	b500      	push	{lr}
 80038ac:	b09c      	sub	sp, #112	; 0x70
 80038ae:	ab1d      	add	r3, sp, #116	; 0x74
 80038b0:	9002      	str	r0, [sp, #8]
 80038b2:	9006      	str	r0, [sp, #24]
 80038b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038b8:	4809      	ldr	r0, [pc, #36]	; (80038e0 <siprintf+0x38>)
 80038ba:	9107      	str	r1, [sp, #28]
 80038bc:	9104      	str	r1, [sp, #16]
 80038be:	4909      	ldr	r1, [pc, #36]	; (80038e4 <siprintf+0x3c>)
 80038c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80038c4:	9105      	str	r1, [sp, #20]
 80038c6:	6800      	ldr	r0, [r0, #0]
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	a902      	add	r1, sp, #8
 80038cc:	f000 f868 	bl	80039a0 <_svfiprintf_r>
 80038d0:	9b02      	ldr	r3, [sp, #8]
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	b01c      	add	sp, #112	; 0x70
 80038d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038dc:	b003      	add	sp, #12
 80038de:	4770      	bx	lr
 80038e0:	20000010 	.word	0x20000010
 80038e4:	ffff0208 	.word	0xffff0208

080038e8 <__ssputs_r>:
 80038e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ec:	688e      	ldr	r6, [r1, #8]
 80038ee:	429e      	cmp	r6, r3
 80038f0:	4682      	mov	sl, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	4690      	mov	r8, r2
 80038f6:	461f      	mov	r7, r3
 80038f8:	d838      	bhi.n	800396c <__ssputs_r+0x84>
 80038fa:	898a      	ldrh	r2, [r1, #12]
 80038fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003900:	d032      	beq.n	8003968 <__ssputs_r+0x80>
 8003902:	6825      	ldr	r5, [r4, #0]
 8003904:	6909      	ldr	r1, [r1, #16]
 8003906:	eba5 0901 	sub.w	r9, r5, r1
 800390a:	6965      	ldr	r5, [r4, #20]
 800390c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003914:	3301      	adds	r3, #1
 8003916:	444b      	add	r3, r9
 8003918:	106d      	asrs	r5, r5, #1
 800391a:	429d      	cmp	r5, r3
 800391c:	bf38      	it	cc
 800391e:	461d      	movcc	r5, r3
 8003920:	0553      	lsls	r3, r2, #21
 8003922:	d531      	bpl.n	8003988 <__ssputs_r+0xa0>
 8003924:	4629      	mov	r1, r5
 8003926:	f000 fb47 	bl	8003fb8 <_malloc_r>
 800392a:	4606      	mov	r6, r0
 800392c:	b950      	cbnz	r0, 8003944 <__ssputs_r+0x5c>
 800392e:	230c      	movs	r3, #12
 8003930:	f8ca 3000 	str.w	r3, [sl]
 8003934:	89a3      	ldrh	r3, [r4, #12]
 8003936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800393a:	81a3      	strh	r3, [r4, #12]
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003944:	6921      	ldr	r1, [r4, #16]
 8003946:	464a      	mov	r2, r9
 8003948:	f000 fabe 	bl	8003ec8 <memcpy>
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003956:	81a3      	strh	r3, [r4, #12]
 8003958:	6126      	str	r6, [r4, #16]
 800395a:	6165      	str	r5, [r4, #20]
 800395c:	444e      	add	r6, r9
 800395e:	eba5 0509 	sub.w	r5, r5, r9
 8003962:	6026      	str	r6, [r4, #0]
 8003964:	60a5      	str	r5, [r4, #8]
 8003966:	463e      	mov	r6, r7
 8003968:	42be      	cmp	r6, r7
 800396a:	d900      	bls.n	800396e <__ssputs_r+0x86>
 800396c:	463e      	mov	r6, r7
 800396e:	4632      	mov	r2, r6
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	4641      	mov	r1, r8
 8003974:	f000 fab6 	bl	8003ee4 <memmove>
 8003978:	68a3      	ldr	r3, [r4, #8]
 800397a:	6822      	ldr	r2, [r4, #0]
 800397c:	1b9b      	subs	r3, r3, r6
 800397e:	4432      	add	r2, r6
 8003980:	60a3      	str	r3, [r4, #8]
 8003982:	6022      	str	r2, [r4, #0]
 8003984:	2000      	movs	r0, #0
 8003986:	e7db      	b.n	8003940 <__ssputs_r+0x58>
 8003988:	462a      	mov	r2, r5
 800398a:	f000 fb6f 	bl	800406c <_realloc_r>
 800398e:	4606      	mov	r6, r0
 8003990:	2800      	cmp	r0, #0
 8003992:	d1e1      	bne.n	8003958 <__ssputs_r+0x70>
 8003994:	6921      	ldr	r1, [r4, #16]
 8003996:	4650      	mov	r0, sl
 8003998:	f000 fabe 	bl	8003f18 <_free_r>
 800399c:	e7c7      	b.n	800392e <__ssputs_r+0x46>
	...

080039a0 <_svfiprintf_r>:
 80039a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a4:	4698      	mov	r8, r3
 80039a6:	898b      	ldrh	r3, [r1, #12]
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	b09d      	sub	sp, #116	; 0x74
 80039ac:	4607      	mov	r7, r0
 80039ae:	460d      	mov	r5, r1
 80039b0:	4614      	mov	r4, r2
 80039b2:	d50e      	bpl.n	80039d2 <_svfiprintf_r+0x32>
 80039b4:	690b      	ldr	r3, [r1, #16]
 80039b6:	b963      	cbnz	r3, 80039d2 <_svfiprintf_r+0x32>
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	f000 fafd 	bl	8003fb8 <_malloc_r>
 80039be:	6028      	str	r0, [r5, #0]
 80039c0:	6128      	str	r0, [r5, #16]
 80039c2:	b920      	cbnz	r0, 80039ce <_svfiprintf_r+0x2e>
 80039c4:	230c      	movs	r3, #12
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	e0d1      	b.n	8003b72 <_svfiprintf_r+0x1d2>
 80039ce:	2340      	movs	r3, #64	; 0x40
 80039d0:	616b      	str	r3, [r5, #20]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9309      	str	r3, [sp, #36]	; 0x24
 80039d6:	2320      	movs	r3, #32
 80039d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80039e0:	2330      	movs	r3, #48	; 0x30
 80039e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b8c <_svfiprintf_r+0x1ec>
 80039e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039ea:	f04f 0901 	mov.w	r9, #1
 80039ee:	4623      	mov	r3, r4
 80039f0:	469a      	mov	sl, r3
 80039f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039f6:	b10a      	cbz	r2, 80039fc <_svfiprintf_r+0x5c>
 80039f8:	2a25      	cmp	r2, #37	; 0x25
 80039fa:	d1f9      	bne.n	80039f0 <_svfiprintf_r+0x50>
 80039fc:	ebba 0b04 	subs.w	fp, sl, r4
 8003a00:	d00b      	beq.n	8003a1a <_svfiprintf_r+0x7a>
 8003a02:	465b      	mov	r3, fp
 8003a04:	4622      	mov	r2, r4
 8003a06:	4629      	mov	r1, r5
 8003a08:	4638      	mov	r0, r7
 8003a0a:	f7ff ff6d 	bl	80038e8 <__ssputs_r>
 8003a0e:	3001      	adds	r0, #1
 8003a10:	f000 80aa 	beq.w	8003b68 <_svfiprintf_r+0x1c8>
 8003a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a16:	445a      	add	r2, fp
 8003a18:	9209      	str	r2, [sp, #36]	; 0x24
 8003a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80a2 	beq.w	8003b68 <_svfiprintf_r+0x1c8>
 8003a24:	2300      	movs	r3, #0
 8003a26:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a2e:	f10a 0a01 	add.w	sl, sl, #1
 8003a32:	9304      	str	r3, [sp, #16]
 8003a34:	9307      	str	r3, [sp, #28]
 8003a36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a3a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a3c:	4654      	mov	r4, sl
 8003a3e:	2205      	movs	r2, #5
 8003a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a44:	4851      	ldr	r0, [pc, #324]	; (8003b8c <_svfiprintf_r+0x1ec>)
 8003a46:	f7fc fbe3 	bl	8000210 <memchr>
 8003a4a:	9a04      	ldr	r2, [sp, #16]
 8003a4c:	b9d8      	cbnz	r0, 8003a86 <_svfiprintf_r+0xe6>
 8003a4e:	06d0      	lsls	r0, r2, #27
 8003a50:	bf44      	itt	mi
 8003a52:	2320      	movmi	r3, #32
 8003a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a58:	0711      	lsls	r1, r2, #28
 8003a5a:	bf44      	itt	mi
 8003a5c:	232b      	movmi	r3, #43	; 0x2b
 8003a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a62:	f89a 3000 	ldrb.w	r3, [sl]
 8003a66:	2b2a      	cmp	r3, #42	; 0x2a
 8003a68:	d015      	beq.n	8003a96 <_svfiprintf_r+0xf6>
 8003a6a:	9a07      	ldr	r2, [sp, #28]
 8003a6c:	4654      	mov	r4, sl
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f04f 0c0a 	mov.w	ip, #10
 8003a74:	4621      	mov	r1, r4
 8003a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a7a:	3b30      	subs	r3, #48	; 0x30
 8003a7c:	2b09      	cmp	r3, #9
 8003a7e:	d94e      	bls.n	8003b1e <_svfiprintf_r+0x17e>
 8003a80:	b1b0      	cbz	r0, 8003ab0 <_svfiprintf_r+0x110>
 8003a82:	9207      	str	r2, [sp, #28]
 8003a84:	e014      	b.n	8003ab0 <_svfiprintf_r+0x110>
 8003a86:	eba0 0308 	sub.w	r3, r0, r8
 8003a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	9304      	str	r3, [sp, #16]
 8003a92:	46a2      	mov	sl, r4
 8003a94:	e7d2      	b.n	8003a3c <_svfiprintf_r+0x9c>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	1d19      	adds	r1, r3, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	9103      	str	r1, [sp, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bfbb      	ittet	lt
 8003aa2:	425b      	neglt	r3, r3
 8003aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8003aa8:	9307      	strge	r3, [sp, #28]
 8003aaa:	9307      	strlt	r3, [sp, #28]
 8003aac:	bfb8      	it	lt
 8003aae:	9204      	strlt	r2, [sp, #16]
 8003ab0:	7823      	ldrb	r3, [r4, #0]
 8003ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ab4:	d10c      	bne.n	8003ad0 <_svfiprintf_r+0x130>
 8003ab6:	7863      	ldrb	r3, [r4, #1]
 8003ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8003aba:	d135      	bne.n	8003b28 <_svfiprintf_r+0x188>
 8003abc:	9b03      	ldr	r3, [sp, #12]
 8003abe:	1d1a      	adds	r2, r3, #4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	9203      	str	r2, [sp, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bfb8      	it	lt
 8003ac8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003acc:	3402      	adds	r4, #2
 8003ace:	9305      	str	r3, [sp, #20]
 8003ad0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b9c <_svfiprintf_r+0x1fc>
 8003ad4:	7821      	ldrb	r1, [r4, #0]
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	4650      	mov	r0, sl
 8003ada:	f7fc fb99 	bl	8000210 <memchr>
 8003ade:	b140      	cbz	r0, 8003af2 <_svfiprintf_r+0x152>
 8003ae0:	2340      	movs	r3, #64	; 0x40
 8003ae2:	eba0 000a 	sub.w	r0, r0, sl
 8003ae6:	fa03 f000 	lsl.w	r0, r3, r0
 8003aea:	9b04      	ldr	r3, [sp, #16]
 8003aec:	4303      	orrs	r3, r0
 8003aee:	3401      	adds	r4, #1
 8003af0:	9304      	str	r3, [sp, #16]
 8003af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af6:	4826      	ldr	r0, [pc, #152]	; (8003b90 <_svfiprintf_r+0x1f0>)
 8003af8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003afc:	2206      	movs	r2, #6
 8003afe:	f7fc fb87 	bl	8000210 <memchr>
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d038      	beq.n	8003b78 <_svfiprintf_r+0x1d8>
 8003b06:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <_svfiprintf_r+0x1f4>)
 8003b08:	bb1b      	cbnz	r3, 8003b52 <_svfiprintf_r+0x1b2>
 8003b0a:	9b03      	ldr	r3, [sp, #12]
 8003b0c:	3307      	adds	r3, #7
 8003b0e:	f023 0307 	bic.w	r3, r3, #7
 8003b12:	3308      	adds	r3, #8
 8003b14:	9303      	str	r3, [sp, #12]
 8003b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b18:	4433      	add	r3, r6
 8003b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b1c:	e767      	b.n	80039ee <_svfiprintf_r+0x4e>
 8003b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b22:	460c      	mov	r4, r1
 8003b24:	2001      	movs	r0, #1
 8003b26:	e7a5      	b.n	8003a74 <_svfiprintf_r+0xd4>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	3401      	adds	r4, #1
 8003b2c:	9305      	str	r3, [sp, #20]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	f04f 0c0a 	mov.w	ip, #10
 8003b34:	4620      	mov	r0, r4
 8003b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b3a:	3a30      	subs	r2, #48	; 0x30
 8003b3c:	2a09      	cmp	r2, #9
 8003b3e:	d903      	bls.n	8003b48 <_svfiprintf_r+0x1a8>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0c5      	beq.n	8003ad0 <_svfiprintf_r+0x130>
 8003b44:	9105      	str	r1, [sp, #20]
 8003b46:	e7c3      	b.n	8003ad0 <_svfiprintf_r+0x130>
 8003b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e7f0      	b.n	8003b34 <_svfiprintf_r+0x194>
 8003b52:	ab03      	add	r3, sp, #12
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	462a      	mov	r2, r5
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <_svfiprintf_r+0x1f8>)
 8003b5a:	a904      	add	r1, sp, #16
 8003b5c:	4638      	mov	r0, r7
 8003b5e:	f3af 8000 	nop.w
 8003b62:	1c42      	adds	r2, r0, #1
 8003b64:	4606      	mov	r6, r0
 8003b66:	d1d6      	bne.n	8003b16 <_svfiprintf_r+0x176>
 8003b68:	89ab      	ldrh	r3, [r5, #12]
 8003b6a:	065b      	lsls	r3, r3, #25
 8003b6c:	f53f af2c 	bmi.w	80039c8 <_svfiprintf_r+0x28>
 8003b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b72:	b01d      	add	sp, #116	; 0x74
 8003b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b78:	ab03      	add	r3, sp, #12
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	462a      	mov	r2, r5
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <_svfiprintf_r+0x1f8>)
 8003b80:	a904      	add	r1, sp, #16
 8003b82:	4638      	mov	r0, r7
 8003b84:	f000 f87a 	bl	8003c7c <_printf_i>
 8003b88:	e7eb      	b.n	8003b62 <_svfiprintf_r+0x1c2>
 8003b8a:	bf00      	nop
 8003b8c:	080041fc 	.word	0x080041fc
 8003b90:	08004206 	.word	0x08004206
 8003b94:	00000000 	.word	0x00000000
 8003b98:	080038e9 	.word	0x080038e9
 8003b9c:	08004202 	.word	0x08004202

08003ba0 <_printf_common>:
 8003ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba4:	4616      	mov	r6, r2
 8003ba6:	4699      	mov	r9, r3
 8003ba8:	688a      	ldr	r2, [r1, #8]
 8003baa:	690b      	ldr	r3, [r1, #16]
 8003bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	bfb8      	it	lt
 8003bb4:	4613      	movlt	r3, r2
 8003bb6:	6033      	str	r3, [r6, #0]
 8003bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bbc:	4607      	mov	r7, r0
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	b10a      	cbz	r2, 8003bc6 <_printf_common+0x26>
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	6033      	str	r3, [r6, #0]
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	0699      	lsls	r1, r3, #26
 8003bca:	bf42      	ittt	mi
 8003bcc:	6833      	ldrmi	r3, [r6, #0]
 8003bce:	3302      	addmi	r3, #2
 8003bd0:	6033      	strmi	r3, [r6, #0]
 8003bd2:	6825      	ldr	r5, [r4, #0]
 8003bd4:	f015 0506 	ands.w	r5, r5, #6
 8003bd8:	d106      	bne.n	8003be8 <_printf_common+0x48>
 8003bda:	f104 0a19 	add.w	sl, r4, #25
 8003bde:	68e3      	ldr	r3, [r4, #12]
 8003be0:	6832      	ldr	r2, [r6, #0]
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	42ab      	cmp	r3, r5
 8003be6:	dc26      	bgt.n	8003c36 <_printf_common+0x96>
 8003be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bec:	1e13      	subs	r3, r2, #0
 8003bee:	6822      	ldr	r2, [r4, #0]
 8003bf0:	bf18      	it	ne
 8003bf2:	2301      	movne	r3, #1
 8003bf4:	0692      	lsls	r2, r2, #26
 8003bf6:	d42b      	bmi.n	8003c50 <_printf_common+0xb0>
 8003bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	4638      	mov	r0, r7
 8003c00:	47c0      	blx	r8
 8003c02:	3001      	adds	r0, #1
 8003c04:	d01e      	beq.n	8003c44 <_printf_common+0xa4>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	68e5      	ldr	r5, [r4, #12]
 8003c0a:	6832      	ldr	r2, [r6, #0]
 8003c0c:	f003 0306 	and.w	r3, r3, #6
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	bf08      	it	eq
 8003c14:	1aad      	subeq	r5, r5, r2
 8003c16:	68a3      	ldr	r3, [r4, #8]
 8003c18:	6922      	ldr	r2, [r4, #16]
 8003c1a:	bf0c      	ite	eq
 8003c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c20:	2500      	movne	r5, #0
 8003c22:	4293      	cmp	r3, r2
 8003c24:	bfc4      	itt	gt
 8003c26:	1a9b      	subgt	r3, r3, r2
 8003c28:	18ed      	addgt	r5, r5, r3
 8003c2a:	2600      	movs	r6, #0
 8003c2c:	341a      	adds	r4, #26
 8003c2e:	42b5      	cmp	r5, r6
 8003c30:	d11a      	bne.n	8003c68 <_printf_common+0xc8>
 8003c32:	2000      	movs	r0, #0
 8003c34:	e008      	b.n	8003c48 <_printf_common+0xa8>
 8003c36:	2301      	movs	r3, #1
 8003c38:	4652      	mov	r2, sl
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	47c0      	blx	r8
 8003c40:	3001      	adds	r0, #1
 8003c42:	d103      	bne.n	8003c4c <_printf_common+0xac>
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c4c:	3501      	adds	r5, #1
 8003c4e:	e7c6      	b.n	8003bde <_printf_common+0x3e>
 8003c50:	18e1      	adds	r1, r4, r3
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	2030      	movs	r0, #48	; 0x30
 8003c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c5a:	4422      	add	r2, r4
 8003c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c64:	3302      	adds	r3, #2
 8003c66:	e7c7      	b.n	8003bf8 <_printf_common+0x58>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	4638      	mov	r0, r7
 8003c70:	47c0      	blx	r8
 8003c72:	3001      	adds	r0, #1
 8003c74:	d0e6      	beq.n	8003c44 <_printf_common+0xa4>
 8003c76:	3601      	adds	r6, #1
 8003c78:	e7d9      	b.n	8003c2e <_printf_common+0x8e>
	...

08003c7c <_printf_i>:
 8003c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c80:	460c      	mov	r4, r1
 8003c82:	4691      	mov	r9, r2
 8003c84:	7e27      	ldrb	r7, [r4, #24]
 8003c86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c88:	2f78      	cmp	r7, #120	; 0x78
 8003c8a:	4680      	mov	r8, r0
 8003c8c:	469a      	mov	sl, r3
 8003c8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c92:	d807      	bhi.n	8003ca4 <_printf_i+0x28>
 8003c94:	2f62      	cmp	r7, #98	; 0x62
 8003c96:	d80a      	bhi.n	8003cae <_printf_i+0x32>
 8003c98:	2f00      	cmp	r7, #0
 8003c9a:	f000 80d8 	beq.w	8003e4e <_printf_i+0x1d2>
 8003c9e:	2f58      	cmp	r7, #88	; 0x58
 8003ca0:	f000 80a3 	beq.w	8003dea <_printf_i+0x16e>
 8003ca4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cac:	e03a      	b.n	8003d24 <_printf_i+0xa8>
 8003cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cb2:	2b15      	cmp	r3, #21
 8003cb4:	d8f6      	bhi.n	8003ca4 <_printf_i+0x28>
 8003cb6:	a001      	add	r0, pc, #4	; (adr r0, 8003cbc <_printf_i+0x40>)
 8003cb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cbc:	08003d15 	.word	0x08003d15
 8003cc0:	08003d29 	.word	0x08003d29
 8003cc4:	08003ca5 	.word	0x08003ca5
 8003cc8:	08003ca5 	.word	0x08003ca5
 8003ccc:	08003ca5 	.word	0x08003ca5
 8003cd0:	08003ca5 	.word	0x08003ca5
 8003cd4:	08003d29 	.word	0x08003d29
 8003cd8:	08003ca5 	.word	0x08003ca5
 8003cdc:	08003ca5 	.word	0x08003ca5
 8003ce0:	08003ca5 	.word	0x08003ca5
 8003ce4:	08003ca5 	.word	0x08003ca5
 8003ce8:	08003e35 	.word	0x08003e35
 8003cec:	08003d59 	.word	0x08003d59
 8003cf0:	08003e17 	.word	0x08003e17
 8003cf4:	08003ca5 	.word	0x08003ca5
 8003cf8:	08003ca5 	.word	0x08003ca5
 8003cfc:	08003e57 	.word	0x08003e57
 8003d00:	08003ca5 	.word	0x08003ca5
 8003d04:	08003d59 	.word	0x08003d59
 8003d08:	08003ca5 	.word	0x08003ca5
 8003d0c:	08003ca5 	.word	0x08003ca5
 8003d10:	08003e1f 	.word	0x08003e1f
 8003d14:	680b      	ldr	r3, [r1, #0]
 8003d16:	1d1a      	adds	r2, r3, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	600a      	str	r2, [r1, #0]
 8003d1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0a3      	b.n	8003e70 <_printf_i+0x1f4>
 8003d28:	6825      	ldr	r5, [r4, #0]
 8003d2a:	6808      	ldr	r0, [r1, #0]
 8003d2c:	062e      	lsls	r6, r5, #24
 8003d2e:	f100 0304 	add.w	r3, r0, #4
 8003d32:	d50a      	bpl.n	8003d4a <_printf_i+0xce>
 8003d34:	6805      	ldr	r5, [r0, #0]
 8003d36:	600b      	str	r3, [r1, #0]
 8003d38:	2d00      	cmp	r5, #0
 8003d3a:	da03      	bge.n	8003d44 <_printf_i+0xc8>
 8003d3c:	232d      	movs	r3, #45	; 0x2d
 8003d3e:	426d      	negs	r5, r5
 8003d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d44:	485e      	ldr	r0, [pc, #376]	; (8003ec0 <_printf_i+0x244>)
 8003d46:	230a      	movs	r3, #10
 8003d48:	e019      	b.n	8003d7e <_printf_i+0x102>
 8003d4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d4e:	6805      	ldr	r5, [r0, #0]
 8003d50:	600b      	str	r3, [r1, #0]
 8003d52:	bf18      	it	ne
 8003d54:	b22d      	sxthne	r5, r5
 8003d56:	e7ef      	b.n	8003d38 <_printf_i+0xbc>
 8003d58:	680b      	ldr	r3, [r1, #0]
 8003d5a:	6825      	ldr	r5, [r4, #0]
 8003d5c:	1d18      	adds	r0, r3, #4
 8003d5e:	6008      	str	r0, [r1, #0]
 8003d60:	0628      	lsls	r0, r5, #24
 8003d62:	d501      	bpl.n	8003d68 <_printf_i+0xec>
 8003d64:	681d      	ldr	r5, [r3, #0]
 8003d66:	e002      	b.n	8003d6e <_printf_i+0xf2>
 8003d68:	0669      	lsls	r1, r5, #25
 8003d6a:	d5fb      	bpl.n	8003d64 <_printf_i+0xe8>
 8003d6c:	881d      	ldrh	r5, [r3, #0]
 8003d6e:	4854      	ldr	r0, [pc, #336]	; (8003ec0 <_printf_i+0x244>)
 8003d70:	2f6f      	cmp	r7, #111	; 0x6f
 8003d72:	bf0c      	ite	eq
 8003d74:	2308      	moveq	r3, #8
 8003d76:	230a      	movne	r3, #10
 8003d78:	2100      	movs	r1, #0
 8003d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d7e:	6866      	ldr	r6, [r4, #4]
 8003d80:	60a6      	str	r6, [r4, #8]
 8003d82:	2e00      	cmp	r6, #0
 8003d84:	bfa2      	ittt	ge
 8003d86:	6821      	ldrge	r1, [r4, #0]
 8003d88:	f021 0104 	bicge.w	r1, r1, #4
 8003d8c:	6021      	strge	r1, [r4, #0]
 8003d8e:	b90d      	cbnz	r5, 8003d94 <_printf_i+0x118>
 8003d90:	2e00      	cmp	r6, #0
 8003d92:	d04d      	beq.n	8003e30 <_printf_i+0x1b4>
 8003d94:	4616      	mov	r6, r2
 8003d96:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d9a:	fb03 5711 	mls	r7, r3, r1, r5
 8003d9e:	5dc7      	ldrb	r7, [r0, r7]
 8003da0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003da4:	462f      	mov	r7, r5
 8003da6:	42bb      	cmp	r3, r7
 8003da8:	460d      	mov	r5, r1
 8003daa:	d9f4      	bls.n	8003d96 <_printf_i+0x11a>
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d10b      	bne.n	8003dc8 <_printf_i+0x14c>
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	07df      	lsls	r7, r3, #31
 8003db4:	d508      	bpl.n	8003dc8 <_printf_i+0x14c>
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	6861      	ldr	r1, [r4, #4]
 8003dba:	4299      	cmp	r1, r3
 8003dbc:	bfde      	ittt	le
 8003dbe:	2330      	movle	r3, #48	; 0x30
 8003dc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dc8:	1b92      	subs	r2, r2, r6
 8003dca:	6122      	str	r2, [r4, #16]
 8003dcc:	f8cd a000 	str.w	sl, [sp]
 8003dd0:	464b      	mov	r3, r9
 8003dd2:	aa03      	add	r2, sp, #12
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	f7ff fee2 	bl	8003ba0 <_printf_common>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d14c      	bne.n	8003e7a <_printf_i+0x1fe>
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	b004      	add	sp, #16
 8003de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dea:	4835      	ldr	r0, [pc, #212]	; (8003ec0 <_printf_i+0x244>)
 8003dec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	680e      	ldr	r6, [r1, #0]
 8003df4:	061f      	lsls	r7, r3, #24
 8003df6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dfa:	600e      	str	r6, [r1, #0]
 8003dfc:	d514      	bpl.n	8003e28 <_printf_i+0x1ac>
 8003dfe:	07d9      	lsls	r1, r3, #31
 8003e00:	bf44      	itt	mi
 8003e02:	f043 0320 	orrmi.w	r3, r3, #32
 8003e06:	6023      	strmi	r3, [r4, #0]
 8003e08:	b91d      	cbnz	r5, 8003e12 <_printf_i+0x196>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f023 0320 	bic.w	r3, r3, #32
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	2310      	movs	r3, #16
 8003e14:	e7b0      	b.n	8003d78 <_printf_i+0xfc>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	f043 0320 	orr.w	r3, r3, #32
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	2378      	movs	r3, #120	; 0x78
 8003e20:	4828      	ldr	r0, [pc, #160]	; (8003ec4 <_printf_i+0x248>)
 8003e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e26:	e7e3      	b.n	8003df0 <_printf_i+0x174>
 8003e28:	065e      	lsls	r6, r3, #25
 8003e2a:	bf48      	it	mi
 8003e2c:	b2ad      	uxthmi	r5, r5
 8003e2e:	e7e6      	b.n	8003dfe <_printf_i+0x182>
 8003e30:	4616      	mov	r6, r2
 8003e32:	e7bb      	b.n	8003dac <_printf_i+0x130>
 8003e34:	680b      	ldr	r3, [r1, #0]
 8003e36:	6826      	ldr	r6, [r4, #0]
 8003e38:	6960      	ldr	r0, [r4, #20]
 8003e3a:	1d1d      	adds	r5, r3, #4
 8003e3c:	600d      	str	r5, [r1, #0]
 8003e3e:	0635      	lsls	r5, r6, #24
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	d501      	bpl.n	8003e48 <_printf_i+0x1cc>
 8003e44:	6018      	str	r0, [r3, #0]
 8003e46:	e002      	b.n	8003e4e <_printf_i+0x1d2>
 8003e48:	0671      	lsls	r1, r6, #25
 8003e4a:	d5fb      	bpl.n	8003e44 <_printf_i+0x1c8>
 8003e4c:	8018      	strh	r0, [r3, #0]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	6123      	str	r3, [r4, #16]
 8003e52:	4616      	mov	r6, r2
 8003e54:	e7ba      	b.n	8003dcc <_printf_i+0x150>
 8003e56:	680b      	ldr	r3, [r1, #0]
 8003e58:	1d1a      	adds	r2, r3, #4
 8003e5a:	600a      	str	r2, [r1, #0]
 8003e5c:	681e      	ldr	r6, [r3, #0]
 8003e5e:	6862      	ldr	r2, [r4, #4]
 8003e60:	2100      	movs	r1, #0
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7fc f9d4 	bl	8000210 <memchr>
 8003e68:	b108      	cbz	r0, 8003e6e <_printf_i+0x1f2>
 8003e6a:	1b80      	subs	r0, r0, r6
 8003e6c:	6060      	str	r0, [r4, #4]
 8003e6e:	6863      	ldr	r3, [r4, #4]
 8003e70:	6123      	str	r3, [r4, #16]
 8003e72:	2300      	movs	r3, #0
 8003e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e78:	e7a8      	b.n	8003dcc <_printf_i+0x150>
 8003e7a:	6923      	ldr	r3, [r4, #16]
 8003e7c:	4632      	mov	r2, r6
 8003e7e:	4649      	mov	r1, r9
 8003e80:	4640      	mov	r0, r8
 8003e82:	47d0      	blx	sl
 8003e84:	3001      	adds	r0, #1
 8003e86:	d0ab      	beq.n	8003de0 <_printf_i+0x164>
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	079b      	lsls	r3, r3, #30
 8003e8c:	d413      	bmi.n	8003eb6 <_printf_i+0x23a>
 8003e8e:	68e0      	ldr	r0, [r4, #12]
 8003e90:	9b03      	ldr	r3, [sp, #12]
 8003e92:	4298      	cmp	r0, r3
 8003e94:	bfb8      	it	lt
 8003e96:	4618      	movlt	r0, r3
 8003e98:	e7a4      	b.n	8003de4 <_printf_i+0x168>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4632      	mov	r2, r6
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	4640      	mov	r0, r8
 8003ea2:	47d0      	blx	sl
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d09b      	beq.n	8003de0 <_printf_i+0x164>
 8003ea8:	3501      	adds	r5, #1
 8003eaa:	68e3      	ldr	r3, [r4, #12]
 8003eac:	9903      	ldr	r1, [sp, #12]
 8003eae:	1a5b      	subs	r3, r3, r1
 8003eb0:	42ab      	cmp	r3, r5
 8003eb2:	dcf2      	bgt.n	8003e9a <_printf_i+0x21e>
 8003eb4:	e7eb      	b.n	8003e8e <_printf_i+0x212>
 8003eb6:	2500      	movs	r5, #0
 8003eb8:	f104 0619 	add.w	r6, r4, #25
 8003ebc:	e7f5      	b.n	8003eaa <_printf_i+0x22e>
 8003ebe:	bf00      	nop
 8003ec0:	0800420d 	.word	0x0800420d
 8003ec4:	0800421e 	.word	0x0800421e

08003ec8 <memcpy>:
 8003ec8:	440a      	add	r2, r1
 8003eca:	4291      	cmp	r1, r2
 8003ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ed0:	d100      	bne.n	8003ed4 <memcpy+0xc>
 8003ed2:	4770      	bx	lr
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ede:	4291      	cmp	r1, r2
 8003ee0:	d1f9      	bne.n	8003ed6 <memcpy+0xe>
 8003ee2:	bd10      	pop	{r4, pc}

08003ee4 <memmove>:
 8003ee4:	4288      	cmp	r0, r1
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	eb01 0402 	add.w	r4, r1, r2
 8003eec:	d902      	bls.n	8003ef4 <memmove+0x10>
 8003eee:	4284      	cmp	r4, r0
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	d807      	bhi.n	8003f04 <memmove+0x20>
 8003ef4:	1e43      	subs	r3, r0, #1
 8003ef6:	42a1      	cmp	r1, r4
 8003ef8:	d008      	beq.n	8003f0c <memmove+0x28>
 8003efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f02:	e7f8      	b.n	8003ef6 <memmove+0x12>
 8003f04:	4402      	add	r2, r0
 8003f06:	4601      	mov	r1, r0
 8003f08:	428a      	cmp	r2, r1
 8003f0a:	d100      	bne.n	8003f0e <memmove+0x2a>
 8003f0c:	bd10      	pop	{r4, pc}
 8003f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f16:	e7f7      	b.n	8003f08 <memmove+0x24>

08003f18 <_free_r>:
 8003f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f1a:	2900      	cmp	r1, #0
 8003f1c:	d048      	beq.n	8003fb0 <_free_r+0x98>
 8003f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f22:	9001      	str	r0, [sp, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f1a1 0404 	sub.w	r4, r1, #4
 8003f2a:	bfb8      	it	lt
 8003f2c:	18e4      	addlt	r4, r4, r3
 8003f2e:	f000 f8d3 	bl	80040d8 <__malloc_lock>
 8003f32:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <_free_r+0x9c>)
 8003f34:	9801      	ldr	r0, [sp, #4]
 8003f36:	6813      	ldr	r3, [r2, #0]
 8003f38:	4615      	mov	r5, r2
 8003f3a:	b933      	cbnz	r3, 8003f4a <_free_r+0x32>
 8003f3c:	6063      	str	r3, [r4, #4]
 8003f3e:	6014      	str	r4, [r2, #0]
 8003f40:	b003      	add	sp, #12
 8003f42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f46:	f000 b8cd 	b.w	80040e4 <__malloc_unlock>
 8003f4a:	42a3      	cmp	r3, r4
 8003f4c:	d90b      	bls.n	8003f66 <_free_r+0x4e>
 8003f4e:	6821      	ldr	r1, [r4, #0]
 8003f50:	1862      	adds	r2, r4, r1
 8003f52:	4293      	cmp	r3, r2
 8003f54:	bf04      	itt	eq
 8003f56:	681a      	ldreq	r2, [r3, #0]
 8003f58:	685b      	ldreq	r3, [r3, #4]
 8003f5a:	6063      	str	r3, [r4, #4]
 8003f5c:	bf04      	itt	eq
 8003f5e:	1852      	addeq	r2, r2, r1
 8003f60:	6022      	streq	r2, [r4, #0]
 8003f62:	602c      	str	r4, [r5, #0]
 8003f64:	e7ec      	b.n	8003f40 <_free_r+0x28>
 8003f66:	461a      	mov	r2, r3
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b10b      	cbz	r3, 8003f70 <_free_r+0x58>
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	d9fa      	bls.n	8003f66 <_free_r+0x4e>
 8003f70:	6811      	ldr	r1, [r2, #0]
 8003f72:	1855      	adds	r5, r2, r1
 8003f74:	42a5      	cmp	r5, r4
 8003f76:	d10b      	bne.n	8003f90 <_free_r+0x78>
 8003f78:	6824      	ldr	r4, [r4, #0]
 8003f7a:	4421      	add	r1, r4
 8003f7c:	1854      	adds	r4, r2, r1
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	d1dd      	bne.n	8003f40 <_free_r+0x28>
 8003f84:	681c      	ldr	r4, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	6053      	str	r3, [r2, #4]
 8003f8a:	4421      	add	r1, r4
 8003f8c:	6011      	str	r1, [r2, #0]
 8003f8e:	e7d7      	b.n	8003f40 <_free_r+0x28>
 8003f90:	d902      	bls.n	8003f98 <_free_r+0x80>
 8003f92:	230c      	movs	r3, #12
 8003f94:	6003      	str	r3, [r0, #0]
 8003f96:	e7d3      	b.n	8003f40 <_free_r+0x28>
 8003f98:	6825      	ldr	r5, [r4, #0]
 8003f9a:	1961      	adds	r1, r4, r5
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	bf04      	itt	eq
 8003fa0:	6819      	ldreq	r1, [r3, #0]
 8003fa2:	685b      	ldreq	r3, [r3, #4]
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	bf04      	itt	eq
 8003fa8:	1949      	addeq	r1, r1, r5
 8003faa:	6021      	streq	r1, [r4, #0]
 8003fac:	6054      	str	r4, [r2, #4]
 8003fae:	e7c7      	b.n	8003f40 <_free_r+0x28>
 8003fb0:	b003      	add	sp, #12
 8003fb2:	bd30      	pop	{r4, r5, pc}
 8003fb4:	200000a4 	.word	0x200000a4

08003fb8 <_malloc_r>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	1ccd      	adds	r5, r1, #3
 8003fbc:	f025 0503 	bic.w	r5, r5, #3
 8003fc0:	3508      	adds	r5, #8
 8003fc2:	2d0c      	cmp	r5, #12
 8003fc4:	bf38      	it	cc
 8003fc6:	250c      	movcc	r5, #12
 8003fc8:	2d00      	cmp	r5, #0
 8003fca:	4606      	mov	r6, r0
 8003fcc:	db01      	blt.n	8003fd2 <_malloc_r+0x1a>
 8003fce:	42a9      	cmp	r1, r5
 8003fd0:	d903      	bls.n	8003fda <_malloc_r+0x22>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	6033      	str	r3, [r6, #0]
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fda:	f000 f87d 	bl	80040d8 <__malloc_lock>
 8003fde:	4921      	ldr	r1, [pc, #132]	; (8004064 <_malloc_r+0xac>)
 8003fe0:	680a      	ldr	r2, [r1, #0]
 8003fe2:	4614      	mov	r4, r2
 8003fe4:	b99c      	cbnz	r4, 800400e <_malloc_r+0x56>
 8003fe6:	4f20      	ldr	r7, [pc, #128]	; (8004068 <_malloc_r+0xb0>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	b923      	cbnz	r3, 8003ff6 <_malloc_r+0x3e>
 8003fec:	4621      	mov	r1, r4
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f000 f862 	bl	80040b8 <_sbrk_r>
 8003ff4:	6038      	str	r0, [r7, #0]
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f000 f85d 	bl	80040b8 <_sbrk_r>
 8003ffe:	1c43      	adds	r3, r0, #1
 8004000:	d123      	bne.n	800404a <_malloc_r+0x92>
 8004002:	230c      	movs	r3, #12
 8004004:	6033      	str	r3, [r6, #0]
 8004006:	4630      	mov	r0, r6
 8004008:	f000 f86c 	bl	80040e4 <__malloc_unlock>
 800400c:	e7e3      	b.n	8003fd6 <_malloc_r+0x1e>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	1b5b      	subs	r3, r3, r5
 8004012:	d417      	bmi.n	8004044 <_malloc_r+0x8c>
 8004014:	2b0b      	cmp	r3, #11
 8004016:	d903      	bls.n	8004020 <_malloc_r+0x68>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	441c      	add	r4, r3
 800401c:	6025      	str	r5, [r4, #0]
 800401e:	e004      	b.n	800402a <_malloc_r+0x72>
 8004020:	6863      	ldr	r3, [r4, #4]
 8004022:	42a2      	cmp	r2, r4
 8004024:	bf0c      	ite	eq
 8004026:	600b      	streq	r3, [r1, #0]
 8004028:	6053      	strne	r3, [r2, #4]
 800402a:	4630      	mov	r0, r6
 800402c:	f000 f85a 	bl	80040e4 <__malloc_unlock>
 8004030:	f104 000b 	add.w	r0, r4, #11
 8004034:	1d23      	adds	r3, r4, #4
 8004036:	f020 0007 	bic.w	r0, r0, #7
 800403a:	1ac2      	subs	r2, r0, r3
 800403c:	d0cc      	beq.n	8003fd8 <_malloc_r+0x20>
 800403e:	1a1b      	subs	r3, r3, r0
 8004040:	50a3      	str	r3, [r4, r2]
 8004042:	e7c9      	b.n	8003fd8 <_malloc_r+0x20>
 8004044:	4622      	mov	r2, r4
 8004046:	6864      	ldr	r4, [r4, #4]
 8004048:	e7cc      	b.n	8003fe4 <_malloc_r+0x2c>
 800404a:	1cc4      	adds	r4, r0, #3
 800404c:	f024 0403 	bic.w	r4, r4, #3
 8004050:	42a0      	cmp	r0, r4
 8004052:	d0e3      	beq.n	800401c <_malloc_r+0x64>
 8004054:	1a21      	subs	r1, r4, r0
 8004056:	4630      	mov	r0, r6
 8004058:	f000 f82e 	bl	80040b8 <_sbrk_r>
 800405c:	3001      	adds	r0, #1
 800405e:	d1dd      	bne.n	800401c <_malloc_r+0x64>
 8004060:	e7cf      	b.n	8004002 <_malloc_r+0x4a>
 8004062:	bf00      	nop
 8004064:	200000a4 	.word	0x200000a4
 8004068:	200000a8 	.word	0x200000a8

0800406c <_realloc_r>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	4607      	mov	r7, r0
 8004070:	4614      	mov	r4, r2
 8004072:	460e      	mov	r6, r1
 8004074:	b921      	cbnz	r1, 8004080 <_realloc_r+0x14>
 8004076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800407a:	4611      	mov	r1, r2
 800407c:	f7ff bf9c 	b.w	8003fb8 <_malloc_r>
 8004080:	b922      	cbnz	r2, 800408c <_realloc_r+0x20>
 8004082:	f7ff ff49 	bl	8003f18 <_free_r>
 8004086:	4625      	mov	r5, r4
 8004088:	4628      	mov	r0, r5
 800408a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800408c:	f000 f830 	bl	80040f0 <_malloc_usable_size_r>
 8004090:	42a0      	cmp	r0, r4
 8004092:	d20f      	bcs.n	80040b4 <_realloc_r+0x48>
 8004094:	4621      	mov	r1, r4
 8004096:	4638      	mov	r0, r7
 8004098:	f7ff ff8e 	bl	8003fb8 <_malloc_r>
 800409c:	4605      	mov	r5, r0
 800409e:	2800      	cmp	r0, #0
 80040a0:	d0f2      	beq.n	8004088 <_realloc_r+0x1c>
 80040a2:	4631      	mov	r1, r6
 80040a4:	4622      	mov	r2, r4
 80040a6:	f7ff ff0f 	bl	8003ec8 <memcpy>
 80040aa:	4631      	mov	r1, r6
 80040ac:	4638      	mov	r0, r7
 80040ae:	f7ff ff33 	bl	8003f18 <_free_r>
 80040b2:	e7e9      	b.n	8004088 <_realloc_r+0x1c>
 80040b4:	4635      	mov	r5, r6
 80040b6:	e7e7      	b.n	8004088 <_realloc_r+0x1c>

080040b8 <_sbrk_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4d06      	ldr	r5, [pc, #24]	; (80040d4 <_sbrk_r+0x1c>)
 80040bc:	2300      	movs	r3, #0
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	602b      	str	r3, [r5, #0]
 80040c4:	f7fc fc10 	bl	80008e8 <_sbrk>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_sbrk_r+0x1a>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_sbrk_r+0x1a>
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	20000144 	.word	0x20000144

080040d8 <__malloc_lock>:
 80040d8:	4801      	ldr	r0, [pc, #4]	; (80040e0 <__malloc_lock+0x8>)
 80040da:	f000 b811 	b.w	8004100 <__retarget_lock_acquire_recursive>
 80040de:	bf00      	nop
 80040e0:	2000014c 	.word	0x2000014c

080040e4 <__malloc_unlock>:
 80040e4:	4801      	ldr	r0, [pc, #4]	; (80040ec <__malloc_unlock+0x8>)
 80040e6:	f000 b80c 	b.w	8004102 <__retarget_lock_release_recursive>
 80040ea:	bf00      	nop
 80040ec:	2000014c 	.word	0x2000014c

080040f0 <_malloc_usable_size_r>:
 80040f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f4:	1f18      	subs	r0, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bfbc      	itt	lt
 80040fa:	580b      	ldrlt	r3, [r1, r0]
 80040fc:	18c0      	addlt	r0, r0, r3
 80040fe:	4770      	bx	lr

08004100 <__retarget_lock_acquire_recursive>:
 8004100:	4770      	bx	lr

08004102 <__retarget_lock_release_recursive>:
 8004102:	4770      	bx	lr

08004104 <_init>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	bf00      	nop
 8004108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410a:	bc08      	pop	{r3}
 800410c:	469e      	mov	lr, r3
 800410e:	4770      	bx	lr

08004110 <_fini>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr
